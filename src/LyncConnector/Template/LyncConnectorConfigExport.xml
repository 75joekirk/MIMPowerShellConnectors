<export-ma server='CONTOSO-FIMWAL1' export-date='2016-02-14 18:01:43.774'>
<!--WARNING>
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!! The contents of this file should not be edited.
!! Any such modifications to this file may result in errors during import.
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
</WARNING-->
<ma-data>
 <format-version>1</format-version>
 <id>{D7A141C2-3C21-4CC1-8B41-14055EF3490B}</id>
 <name>Skype</name>
 <category>Extensible2</category>
 <subtype>PowerShell (Microsoft)</subtype>
 <ma-listname>PowerShell (Microsoft)</ma-listname>
 <ma-companyname>Microsoft</ma-companyname>
 <creation-time>2016-02-06 19:45:38.067</creation-time>
 <last-modification-time>2016-02-14 17:57:42.952</last-modification-time>
 <version>48</version>
 <internal-version>1</internal-version>
 <password-sync-allowed>0</password-sync-allowed>
 <schema>
  <dsml:dsml xmlns:ms-dsml="http://www.microsoft.com/MMS/DSML" xmlns:dsml="http://www.dsml.org/DSML"><dsml:directory-schema ms-dsml:no-objectclass-validation="true"><dsml:class id="OrganizationalUnit" type="structural" ms-dsml:locked="1"><dsml:name>OrganizationalUnit</dsml:name><dsml:attribute ref="#Name" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#ObjectClass" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ObjectCategory" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#Guid" required="true" ms-dsml:isAnchor="true" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#export_password" required="false" /></dsml:class><dsml:class id="User" type="structural" ms-dsml:locked="1"><dsml:name>User</dsml:name><dsml:attribute ref="#ArchivingPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#AudioVideoDisabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ClientPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ClientVersionPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ConferencingPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#DialPlan" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#DisplayName" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#Enabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#EnabledForFederation" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#EnabledForInternetAccess" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#EnabledForRichPresence" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#EnterpriseVoiceEnabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ExternalAccessPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#FirstName" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#HomeServer" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#HostedVoiceMail" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#HostedVoicemailPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#HostingProvider" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#Identity" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#IPPBXSoftPhoneRoutingEnabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#IsValid" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#LastName" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#LineServerURI" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#LineURI" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#LocationPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#Name" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#ObjectCategory" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#ObjectClass" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#OriginatorSid" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#PinPolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#PresencePolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#PrivateLine" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#ProxyAddresses" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#PublicNetworkEnabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#RegistrarPool" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#RemoteCallControlTelephonyEnabled" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#SamAccountName" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#Sid" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#SipAddress" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#TargetRegistrarPool" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#TargetServerIfMoving" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#TenantId" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#UserPrincipalName" required="false" ms-dsml:isAnchor="false" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#VoicePolicy" required="false" ms-dsml:isAnchor="false" /><dsml:attribute ref="#Guid" required="true" ms-dsml:isAnchor="true" ms-dsml:allowedOperation="ImportOnly" /><dsml:attribute ref="#export_password" required="false" /></dsml:class><dsml:attribute-type id="Name" single-value="true" ms-dsml:immutable="true"><dsml:name>Name</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ObjectClass" single-value="false"><dsml:name>ObjectClass</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ObjectCategory" single-value="true" ms-dsml:immutable="true"><dsml:name>ObjectCategory</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="Guid" single-value="true" ms-dsml:immutable="true"><dsml:name>Guid</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.5</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ArchivingPolicy" single-value="true"><dsml:name>ArchivingPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="AudioVideoDisabled" single-value="true"><dsml:name>AudioVideoDisabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ClientPolicy" single-value="true"><dsml:name>ClientPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ClientVersionPolicy" single-value="true"><dsml:name>ClientVersionPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ConferencingPolicy" single-value="true"><dsml:name>ConferencingPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="DialPlan" single-value="true"><dsml:name>DialPlan</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="DisplayName" single-value="true" ms-dsml:immutable="true"><dsml:name>DisplayName</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="Enabled" single-value="true"><dsml:name>Enabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="EnabledForFederation" single-value="true"><dsml:name>EnabledForFederation</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="EnabledForInternetAccess" single-value="true"><dsml:name>EnabledForInternetAccess</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="EnabledForRichPresence" single-value="true"><dsml:name>EnabledForRichPresence</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="EnterpriseVoiceEnabled" single-value="true"><dsml:name>EnterpriseVoiceEnabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ExternalAccessPolicy" single-value="true"><dsml:name>ExternalAccessPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="FirstName" single-value="true" ms-dsml:immutable="true"><dsml:name>FirstName</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="HomeServer" single-value="true"><dsml:name>HomeServer</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="HostedVoiceMail" single-value="true"><dsml:name>HostedVoiceMail</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="HostedVoicemailPolicy" single-value="true"><dsml:name>HostedVoicemailPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="HostingProvider" single-value="true"><dsml:name>HostingProvider</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="Identity" single-value="true"><dsml:name>Identity</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="IPPBXSoftPhoneRoutingEnabled" single-value="true"><dsml:name>IPPBXSoftPhoneRoutingEnabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="IsValid" single-value="true"><dsml:name>IsValid</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="LastName" single-value="true" ms-dsml:immutable="true"><dsml:name>LastName</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="LineServerURI" single-value="true"><dsml:name>LineServerURI</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="LineURI" single-value="true"><dsml:name>LineURI</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="LocationPolicy" single-value="true"><dsml:name>LocationPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="OriginatorSid" single-value="true"><dsml:name>OriginatorSid</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="PinPolicy" single-value="true"><dsml:name>PinPolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="PresencePolicy" single-value="true"><dsml:name>PresencePolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="PrivateLine" single-value="true"><dsml:name>PrivateLine</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="ProxyAddresses" single-value="false"><dsml:name>ProxyAddresses</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="PublicNetworkEnabled" single-value="true"><dsml:name>PublicNetworkEnabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="RegistrarPool" single-value="true"><dsml:name>RegistrarPool</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="RemoteCallControlTelephonyEnabled" single-value="true"><dsml:name>RemoteCallControlTelephonyEnabled</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.7</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="SamAccountName" single-value="true" ms-dsml:immutable="true"><dsml:name>SamAccountName</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="Sid" single-value="true" ms-dsml:immutable="true"><dsml:name>Sid</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="SipAddress" single-value="true"><dsml:name>SipAddress</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="TargetRegistrarPool" single-value="true"><dsml:name>TargetRegistrarPool</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="TargetServerIfMoving" single-value="true"><dsml:name>TargetServerIfMoving</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="TenantId" single-value="true"><dsml:name>TenantId</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.5</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="UserPrincipalName" single-value="true" ms-dsml:immutable="true"><dsml:name>UserPrincipalName</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="VoicePolicy" single-value="true"><dsml:name>VoicePolicy</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type><dsml:attribute-type id="export_password" single-value="true" ms-dsml:encrypted="true" ms-dsml:export-only="true"><dsml:name>export_password</dsml:name><dsml:syntax>1.3.6.1.4.1.1466.115.121.1.15</dsml:syntax></dsml:attribute-type></dsml:directory-schema></dsml:dsml>
 </schema>
 <attribute-inclusion><attribute>AudioVideoDisabled</attribute><attribute>ClientPolicy</attribute><attribute>ClientVersionPolicy</attribute><attribute>ConferencingPolicy</attribute><attribute>DialPlan</attribute><attribute>DisplayName</attribute><attribute>Enabled</attribute><attribute>EnabledForFederation</attribute><attribute>EnabledForInternetAccess</attribute><attribute>EnabledForRichPresence</attribute><attribute>EnterpriseVoiceEnabled</attribute><attribute>ExternalAccessPolicy</attribute><attribute>FirstName</attribute><attribute>Guid</attribute><attribute>HomeServer</attribute><attribute>HostedVoiceMail</attribute><attribute>HostedVoicemailPolicy</attribute><attribute>HostingProvider</attribute><attribute>Identity</attribute><attribute>IPPBXSoftPhoneRoutingEnabled</attribute><attribute>IsValid</attribute><attribute>LastName</attribute><attribute>LineServerURI</attribute><attribute>LineURI</attribute><attribute>LocationPolicy</attribute><attribute>Name</attribute><attribute>ObjectCategory</attribute><attribute>ObjectClass</attribute><attribute>OriginatorSid</attribute><attribute>PinPolicy</attribute><attribute>PresencePolicy</attribute><attribute>PrivateLine</attribute><attribute>ProxyAddresses</attribute><attribute>PublicNetworkEnabled</attribute><attribute>RegistrarPool</attribute><attribute>RemoteCallControlTelephonyEnabled</attribute><attribute>SamAccountName</attribute><attribute>Sid</attribute><attribute>SipAddress</attribute><attribute>TargetRegistrarPool</attribute><attribute>TargetServerIfMoving</attribute><attribute>TenantId</attribute><attribute>UserPrincipalName</attribute><attribute>VoicePolicy</attribute><attribute>export_password</attribute></attribute-inclusion>
 <stay-disconnector />
 <join>
</join>

 <projection>
</projection>

 <export-attribute-flow>
 <export-flow-set cd-object-type="User" mv-object-type="person">
  <export-flow cd-attribute="Enabled" id="{4634E4BE-DE47-41E8-BF9A-296B7036E94E}" suppress-deletions="false">
   <sync-rule-mapping mapping-type="constant" sync-rule-id="{D5883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{5B3538DC-8A16-4B9B-B3B2-DB1F19C00D4F}" initial-flow-only="true" is-existence-test="false">
    <sync-rule-value>1</sync-rule-value>
   </sync-rule-mapping>
  </export-flow>
  <export-flow cd-attribute="dn" id="{8CE847E8-E4DC-427B-80F5-7B70BF18E415}" suppress-deletions="false">
   <sync-rule-mapping mapping-type="direct" sync-rule-id="{D5883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{2EB30357-0714-4078-8B08-CC134B68A4E3}" initial-flow-only="true" is-existence-test="false">
    <src-attribute>xActiveDirectoryDN</src-attribute>
   </sync-rule-mapping>
  </export-flow>
  <export-flow cd-attribute="RegistrarPool" id="{3D705628-2B54-4624-A993-0670495B42D9}" suppress-deletions="true">
   <sync-rule-mapping mapping-type="constant" sync-rule-id="{D5883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{FF788E07-24EF-4AA5-8B86-BA0C4DFDA3DF}" initial-flow-only="false" is-existence-test="false">
    <sync-rule-value>contoso-s4b01.contoso.com</sync-rule-value>
   </sync-rule-mapping>
  </export-flow>
 </export-flow-set>
</export-attribute-flow>

 <provisioning-cleanup type="declared"><action>make-normal-disconnector</action></provisioning-cleanup>
 <extension />
 <controller-configuration>
 <application-protection>low</application-protection>
 <application-architecture>process</application-architecture>
</controller-configuration>

 <description></description>
 <ma-ui-settings><account-joiner-queries><attributes></attributes><filters max_mv_search_results=""></filters></account-joiner-queries></ma-ui-settings>
 <private-configuration>
  <MAConfig><ui-data><xmlwizard><properties><sample_file></sample_file><code_page_description></code_page_description></properties><partitions></partitions><primary_class_mappings><mapping object_class="OrganizationalUnit" primary_class="OrganizationalUnit" user_define="0"><attribute>Name</attribute><attribute>ObjectClass</attribute><attribute>ObjectCategory</attribute><attribute>Guid</attribute><attribute>export_password</attribute></mapping><mapping object_class="User" primary_class="User" user_define="0"><attribute>AudioVideoDisabled</attribute><attribute>ClientPolicy</attribute><attribute>ClientVersionPolicy</attribute><attribute>ConferencingPolicy</attribute><attribute>DialPlan</attribute><attribute>DisplayName</attribute><attribute>Enabled</attribute><attribute>EnabledForFederation</attribute><attribute>EnabledForInternetAccess</attribute><attribute>EnabledForRichPresence</attribute><attribute>EnterpriseVoiceEnabled</attribute><attribute>ExternalAccessPolicy</attribute><attribute>FirstName</attribute><attribute>HomeServer</attribute><attribute>HostedVoiceMail</attribute><attribute>HostedVoicemailPolicy</attribute><attribute>HostingProvider</attribute><attribute>Identity</attribute><attribute>IPPBXSoftPhoneRoutingEnabled</attribute><attribute>IsValid</attribute><attribute>LastName</attribute><attribute>LineServerURI</attribute><attribute>LineURI</attribute><attribute>LocationPolicy</attribute><attribute>Name</attribute><attribute>ObjectCategory</attribute><attribute>ObjectClass</attribute><attribute>OriginatorSid</attribute><attribute>PinPolicy</attribute><attribute>PresencePolicy</attribute><attribute>PrivateLine</attribute><attribute>ProxyAddresses</attribute><attribute>PublicNetworkEnabled</attribute><attribute>RegistrarPool</attribute><attribute>RemoteCallControlTelephonyEnabled</attribute><attribute>SamAccountName</attribute><attribute>Sid</attribute><attribute>SipAddress</attribute><attribute>TargetRegistrarPool</attribute><attribute>TargetServerIfMoving</attribute><attribute>TenantId</attribute><attribute>UserPrincipalName</attribute><attribute>VoicePolicy</attribute><attribute>Guid</attribute><attribute>export_password</attribute></mapping></primary_class_mappings><object_classes><object_class cd_name="OrganizationalUnit" selected="-1" user_define="0" configured="-1" anchor="" dn_as_anchor="0"><attribute mandatory="0">Name</attribute><attribute mandatory="0">ObjectClass</attribute><attribute mandatory="0">ObjectCategory</attribute><attribute mandatory="-1">Guid</attribute><attribute mandatory="0">export_password</attribute></object_class><object_class cd_name="User" selected="-1" user_define="0" configured="-1" anchor="" dn_as_anchor="0"><attribute mandatory="0">AudioVideoDisabled</attribute><attribute mandatory="0">ClientPolicy</attribute><attribute mandatory="0">ClientVersionPolicy</attribute><attribute mandatory="0">ConferencingPolicy</attribute><attribute mandatory="0">DialPlan</attribute><attribute mandatory="0">DisplayName</attribute><attribute mandatory="0">Enabled</attribute><attribute mandatory="0">EnabledForFederation</attribute><attribute mandatory="0">EnabledForInternetAccess</attribute><attribute mandatory="0">EnabledForRichPresence</attribute><attribute mandatory="0">EnterpriseVoiceEnabled</attribute><attribute mandatory="0">ExternalAccessPolicy</attribute><attribute mandatory="0">FirstName</attribute><attribute mandatory="0">HomeServer</attribute><attribute mandatory="0">HostedVoiceMail</attribute><attribute mandatory="0">HostedVoicemailPolicy</attribute><attribute mandatory="0">HostingProvider</attribute><attribute mandatory="0">Identity</attribute><attribute mandatory="0">IPPBXSoftPhoneRoutingEnabled</attribute><attribute mandatory="0">IsValid</attribute><attribute mandatory="0">LastName</attribute><attribute mandatory="0">LineServerURI</attribute><attribute mandatory="0">LineURI</attribute><attribute mandatory="0">LocationPolicy</attribute><attribute mandatory="0">Name</attribute><attribute mandatory="0">ObjectCategory</attribute><attribute mandatory="0">ObjectClass</attribute><attribute mandatory="0">OriginatorSid</attribute><attribute mandatory="0">PinPolicy</attribute><attribute mandatory="0">PresencePolicy</attribute><attribute mandatory="0">PrivateLine</attribute><attribute mandatory="0">ProxyAddresses</attribute><attribute mandatory="0">PublicNetworkEnabled</attribute><attribute mandatory="0">RegistrarPool</attribute><attribute mandatory="0">RemoteCallControlTelephonyEnabled</attribute><attribute mandatory="0">SamAccountName</attribute><attribute mandatory="0">Sid</attribute><attribute mandatory="0">SipAddress</attribute><attribute mandatory="0">TargetRegistrarPool</attribute><attribute mandatory="0">TargetServerIfMoving</attribute><attribute mandatory="0">TenantId</attribute><attribute mandatory="0">UserPrincipalName</attribute><attribute mandatory="0">VoicePolicy</attribute><attribute mandatory="-1">Guid</attribute><attribute mandatory="0">export_password</attribute></object_class></object_classes><attributes><attribute cd_name="AudioVideoDisabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="ClientPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="ClientVersionPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="ConferencingPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="DialPlan" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="DisplayName" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="Enabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="EnabledForFederation" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="EnabledForInternetAccess" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="EnabledForRichPresence" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="EnterpriseVoiceEnabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="ExternalAccessPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="FirstName" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="Guid" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Binary" user_define="0" /><attribute cd_name="HomeServer" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="HostedVoiceMail" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="HostedVoicemailPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="HostingProvider" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="Identity" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="IPPBXSoftPhoneRoutingEnabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="IsValid" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="LastName" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="LineServerURI" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="LineURI" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="LocationPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="Name" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="ObjectCategory" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="ObjectClass" sample_data="" binary="0" multi_valued="-1" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="OriginatorSid" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="PinPolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="PresencePolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="PrivateLine" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="ProxyAddresses" sample_data="" binary="0" multi_valued="-1" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="PublicNetworkEnabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="RegistrarPool" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="RemoteCallControlTelephonyEnabled" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Bool" user_define="0" /><attribute cd_name="SamAccountName" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="Sid" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="SipAddress" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="TargetRegistrarPool" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="TargetServerIfMoving" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="TenantId" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="Binary" user_define="0" /><attribute cd_name="UserPrincipalName" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="VoicePolicy" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /><attribute cd_name="export_password" sample_data="" binary="0" multi_valued="0" file_reference="0" selected="-1" lower_bound="" upper_bound="" type="String" user_define="0" /></attributes><anchor><attribute object_class="OrganizationalUnit">Guid</attribute><attribute object_class="User">Guid</attribute></anchor></xmlwizard><ma-help-text>Using this Connector you can synchronize with PowerShell Connector compliant data sources</ma-help-text></ui-data><importing><anchor><attribute object_class="OrganizationalUnit">Guid</attribute><attribute object_class="User">Guid</attribute></anchor><per-class-settings><class><name>OrganizationalUnit</name><anchor><attribute>Guid</attribute></anchor></class><class><name>User</name><anchor><attribute>Guid</attribute></anchor></class></per-class-settings></importing><exporting></exporting><ldap-dn>0</ldap-dn><change_type_attribute></change_type_attribute><add_change_type_value>Add</add_change_type_value><modify_change_type_value>Modify</modify_change_type_value><delete_change_type_value>Delete</delete_change_type_value><primary_class_mappings><mapping><primary_class>OrganizationalUnit</primary_class><oc-value>OrganizationalUnit</oc-value></mapping><mapping><primary_class>User</primary_class><oc-value>User</oc-value></mapping></primary_class_mappings><enable-unapplied-merge>0</enable-unapplied-merge><password-extension-config><password-extension-enabled>0</password-extension-enabled><dll data-owner="ISV"></dll><password-set-enabled></password-set-enabled><password-change-enabled></password-change-enabled><connection-info><connect-to></connect-to><user></user></connection-info><timeout></timeout></password-extension-config><file-type>Extensible2</file-type><extension-config><filename data-owner="ISV">Microsoft.IAM.Connector.PowerShell.dll</filename><import-default-page-size>9999</import-default-page-size><import-max-page-size>2147483647</import-max-page-size><export-default-page-size>9999</export-default-page-size><export-max-page-size>2147483647</export-max-page-size><export-mode data-owner="ISV">call-based</export-mode><import-mode>call-based</import-mode><export-enabled data-owner="ISV">1</export-enabled><import-enabled data-owner="ISV">1</import-enabled><discovery-partition>extensibility</discovery-partition><discovery-schema>extensibility</discovery-schema><discovery-hierarchy>extensibility</discovery-hierarchy><password-management-enabled>1</password-management-enabled><assembly-version>1.0.419.911</assembly-version><export-type>1</export-type><capability-bits>2751960688</capability-bits><supports-parameters-ex>0</supports-parameters-ex></extension-config><parameter-definitions refreshSchema="0" refreshPartition="0" refreshConnectivityParameters="0" refreshCapabilitiesParameters="0" refreshGlobalParameters="0" refreshOtherParameters="0" refreshSchemaParameters="0"><parameter><name></name><use>connectivity</use><type>label</type><validation></validation><text>To create a connector, specify parameters as appropriate to your target system</text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Server</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Domain</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>User</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Password</name><use>connectivity</use><type>encrypted-string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>label</type><validation></validation><text>With Impersonate Connector Account, each PowerShell script will execute in its own runspace with the credentials provided above</text><default-value></default-value></parameter><parameter><name>Impersonate Connector Account</name><use>connectivity</use><type>checkbox</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Load User Profile When Impersonating</name><use>connectivity</use><type>checkbox</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Logon Type When Impersonating</name><use>connectivity</use><type>drop-down</type><validation>None,LogOnInteractive,LogOnNetwork,LogOnBatch,LogOnService,LogOnNetworkClearText</validation><text></text><default-value>None</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Signed Scripts Only</name><use>connectivity</use><type>checkbox</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Common Module Script Name (with extension)</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Common Module Script</name><use>connectivity</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Validation Script</name><use>connectivity</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Schema Script</name><use>connectivity</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>connectivity</use><type>label</type><validation></validation><text>Provide additional parameter names in the below fields (Multiple names must be separated by comma)</text><default-value></default-value></parameter><parameter><name>Additional Config Parameter Names</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Additional Encrypted Config Parameter Names</name><use>connectivity</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Hierarchy Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Begin Import Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Import Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>End Import Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Begin Export Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Export Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>End Export Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>global</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Begin Password Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Password Extension Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>End Password Script</name><use>global</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>global</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>global</use><type>label</type><validation></validation><text>Additional Configuration Parameters</text><default-value></default-value></parameter><parameter><name>SipAddressType_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>SipDomain_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>ForceMove_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>UserPages_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>OrganizationalUnitPages_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>PreferredDomainControllerFQDN_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>LastRunDateTimeOffsetMinute_Global</name><use>global</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>capabilities</use><type>label</type><validation></validation><text>Please define the capabilities of the Connector and the Connected System</text><default-value></default-value></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Distinguished Name Style</name><use>capabilities</use><type>drop-down</type><validation>None,Generic,Ldap</validation><text></text><default-value>Ldap</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name>Export Type</name><use>capabilities</use><type>drop-down</type><validation>AttributeUpdate,AttributeReplace,ObjectReplace,MultivaluedReferenceAttributeUpdate</validation><text></text><default-value>AttributeUpdate</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name>Data Normalization</name><use>capabilities</use><type>drop-down</type><validation>None,Uppercase,RemoveAccents,Both</validation><text></text><default-value>None</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name>Object Confirmation</name><use>capabilities</use><type>drop-down</type><validation>Normal,NoDeleteConfirmation,NoAddAndDeleteConfirmation</validation><text></text><default-value>Normal</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Use DN As Anchor (Only LDAP style DN)</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Concurrent Operations Of Several Connectors</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>1</default-value></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partitions (Only LDAP style DN)</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Hierarchy (Only LDAP style DN)</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Enable Import</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>1</default-value></parameter><parameter><name>Enable Delta Import</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Enable Export</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Enable Full Export</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>No Reference Values In First Export Pass</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Enable Object Rename</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Delete-Add As Replace</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name></name><use>capabilities</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Enable Password operations</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name>Enable Export Password In First Pass</name><use>capabilities</use><type>checkbox</type><validation></validation><text></text><default-value>0</default-value></parameter><parameter><name></name><use>partition</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Server</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>partition</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Domain</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition User</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Password</name><use>partition</use><type>encrypted-string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>partition</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>partition</use><type>label</type><validation></validation><text>With Partition Impersonate Connector Account, each PowerShell script will execute in its own runspace with the credentials provided above</text><default-value></default-value></parameter><parameter><name>Partition Impersonate Connector Account</name><use>partition</use><type>checkbox</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Load User Profile When Impersonating</name><use>partition</use><type>checkbox</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Logon Type When Impersonating</name><use>partition</use><type>drop-down</type><validation>None,LogOnInteractive,LogOnNetwork,LogOnBatch,LogOnService,LogOnNetworkClearText</validation><text></text><default-value>None</default-value><dropdown-extensible>0</dropdown-extensible></parameter><parameter><name></name><use>partition</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>Partition Validation Script</name><use>partition</use><type>text</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>partition</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>partition</use><type>label</type><validation></validation><text>Additional Configuration Parameters</text><default-value></default-value></parameter><parameter><name>SipAddressType_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>SipDomain_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>ForceMove_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>UserPages_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>OrganizationalUnitPages_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>PreferredDomainControllerFQDN_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>LastRunDateTimeOffsetMinute_Partition</name><use>partition</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>run-step</use><type>label</type><validation></validation><text>RunStep Specific Configuration</text><default-value></default-value></parameter><parameter><name></name><use>run-step</use><type>divider</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name></name><use>run-step</use><type>label</type><validation></validation><text>Additional Configuration Parameters</text><default-value></default-value></parameter><parameter><name>SipAddressType_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>SipDomain_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>ForceMove_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>UserPages_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>OrganizationalUnitPages_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>PreferredDomainControllerFQDN_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter><parameter><name>LastRunDateTimeOffsetMinute_RunStep</name><use>run-step</use><type>string</type><validation></validation><text></text><default-value></default-value></parameter></parameter-definitions><parameter-values><parameter name="Password" type="encrypted-string" use="connectivity" encrypted="1"></parameter><parameter name="Distinguished Name Style" type="drop-down" use="capabilities">Ldap</parameter><parameter name="Export Type" type="drop-down" use="capabilities">AttributeUpdate</parameter><parameter name="Data Normalization" type="drop-down" use="capabilities">None</parameter><parameter name="Object Confirmation" type="drop-down" use="capabilities">NoAddAndDeleteConfirmation</parameter><parameter name="Use DN As Anchor (Only LDAP style DN)" type="checkbox" use="capabilities">0</parameter><parameter name="Concurrent Operations Of Several Connectors" type="checkbox" use="capabilities">1</parameter><parameter name="Partitions (Only LDAP style DN)" type="checkbox" use="capabilities">1</parameter><parameter name="Hierarchy (Only LDAP style DN)" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Import" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Delta Import" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Export" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Full Export" type="checkbox" use="capabilities">0</parameter><parameter name="No Reference Values In First Export Pass" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Object Rename" type="checkbox" use="capabilities">1</parameter><parameter name="Delete-Add As Replace" type="checkbox" use="capabilities">1</parameter><parameter name="Enable Password operations" type="checkbox" use="capabilities">0</parameter><parameter name="Enable Export Password In First Pass" type="checkbox" use="capabilities">0</parameter><parameter name="Server" type="string" use="connectivity">https://s4badmin.contoso.com/OcsPowerShell</parameter><parameter name="Domain" type="string" use="connectivity">CONTOSO</parameter><parameter name="User" type="string" use="connectivity">svc_fim_s4bma</parameter><parameter name="Impersonate Connector Account" type="checkbox" use="connectivity">0</parameter><parameter name="Load User Profile When Impersonating" type="checkbox" use="connectivity">0</parameter><parameter name="Logon Type When Impersonating" type="drop-down" use="connectivity">None</parameter><parameter name="Signed Scripts Only" type="checkbox" use="connectivity">0</parameter><parameter name="Common Module Script Name (with extension)" type="string" use="connectivity">Lync.common.psm1</parameter><parameter name="Common Module Script" type="text" use="connectivity">&lt;#
&lt;copyright file="Lync.Common.psm1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	Common Utility Functions shared by all Skype 2015 / Lync 2010 / 2013 Connector scripts.
&lt;/summary&gt;
#&gt;

Set-StrictMode -Version "2.0"

#region "Global Variables"

$Global:ConnectorName = "LyncPowerShellConnector"
$Global:RemoteSessionName = "LyncPowerShellConnector"
$Error.Clear()

#endregion "Global Variables"

#region "Import Dependent Modules"

# None

#endregion "Import Dependent Modules"

function Enter-Script
{
	&lt;#
	.Synopsis
		Writes the Versbose message saying specified script execution started.
	.Description
		Writes the Versbose message saying specified script execution started.
		Also clear the $Error variable.
	#&gt;
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$ScriptType
	)

	Write-Verbose "$Global:ConnectorName - $ScriptType Script: Execution Started..."
	$Error.Clear()
}

function Exit-Script
{
	&lt;#
	.Synopsis
		Checks $Error variable for any Errors. Writes the Versbose message saying specified script execution sucessfully completed.
	.Description
		Checks $Error variable for any Errors. Writes the Versbose message saying specified script execution sucessfully completed.
		Throws an exception if $Error is present
	#&gt;
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$ScriptType,
		[parameter(Mandatory = $false)]
		[switch]
		$SuppressErrorCheck,
		[parameter(Mandatory = $false)]
		[Type]
		$ExceptionRaisedOnErrorCheck
	)

	if ($Error.Count -ne 0 -and !$SuppressErrorCheck)
	{
		$errorMessage = [string]$Error[0]

		if ($ExceptionRaisedOnErrorCheck -eq $null)
		{
			$ExceptionRaisedOnErrorCheck = [Microsoft.MetadirectoryServices.ExtensibleExtensionException]
		}

		throw  $errorMessage -as $ExceptionRaisedOnErrorCheck
	}

	Write-Verbose "$Global:ConnectorName - $ScriptType Script: Execution Completed."
}

function Get-ExtensionsDirectory
{
	&lt;#
	.Synopsis
		Gets the path of the "Extensions" folder.
	.Description
		Gets the path of the "Extensions" folder on a FIM Sync server.
		If FIM Sync is not installed on the DEV machine, it returns the present working directory.
	#&gt;
	[CmdletBinding()]
	[OutputType([string])]
	param (
	)

	process
	{
		$scriptDir = $PWD

		$syncDir = Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\FIMSynchronizationService\Parameters" -Name Path -ErrorAction SilentlyContinue

		if ($syncDir)
		{
			$scriptDir = Join-Path -Path $syncDir.Path -ChildPath "Extensions"
		}

		return $scriptDir
	}
}

function New-GenericObject
{
	&lt;#
	.Synopsis
		Create a new generic object.
	.Description
		Create a new generic object.
	.Example
		New-GenericObject -TypeName System.Collections.Generic.List  -TypeParameters Microsoft.MetadirectoryServices.CSEntryChange
	#&gt;
	
	[CmdletBinding()]
	[OutputType([object])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$TypeName,
		[parameter(Mandatory = $true)]
		[string[]]
		$TypeParameters,
		[parameter(Mandatory = $false)]
		[object[]] 
		$ConstructorParameters
	)

	process
	{
		$genericTypeName = $typeName + '`' + $typeParameters.Count
		$genericType = [Type]$genericTypeName

		if (!$genericType)
		{
			throw "Could not find generic type $genericTypeName"
		}

		# Bind the type arguments to it
		$typedParameters = [type[]] $TypeParameters
		$closedType = $genericType.MakeGenericType($typedParameters)
	
		if (!$closedType)
		{
			throw "Could not make closed type $genericType"
		}

		# Create the closed version of the generic type, don't forget comma prefix
		,[Activator]::CreateInstance($closedType, $constructorParameters)
	}
}

function Test-Variable
{
	&lt;#
	.Synopsis
		Tests if a variable is not null.
	.Description
		Tests if a variable is not null. Returns $true if the variable is declared and not null
	.Example
		Test-Variable -Name "session" -Scope "global"
	#&gt;

	[CmdletBinding()]
	[OutputType([bool])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$Name,
		[parameter(Mandatory = $true)]
		[string]
		$Scope
	)

	process
	{
		# Return $true if the variable is declared and not null
	
		if ($Scope -eq "local")
		{
			$Scope = "1" # Parent Scope
		}

		$declaredAndNotNull = (Test-Path "variable:\${Scope}:$Name") -and (Get-Variable -Name $Name -Scope $Scope -ValueOnly) -ne $null

		return $declaredAndNotNull
	}
}

function ConvertFrom-SchemaXml
{
	&lt;#
	.Synopsis
		Converts a connector schema defined in a xml file into a "Microsoft.MetadirectoryServices.Schema" object.
	.Description
		Converts a connector schema defined in a xml file into a "Microsoft.MetadirectoryServices.Schema" object.
	.Example
		ConvertFrom-SchemaXml -SchemaXml "Schema-Lync.xml"
	#&gt;

	[CmdletBinding()]
	[OutputType([Microsoft.MetadirectoryServices.Schema])]
	param (
		[parameter(Mandatory = $true)]
		[ValidateScript({ Test-Path $_ -PathType "Leaf" })]
		[string]
		$SchemaXml
	)

	process
	{
		$x = [xml](Get-Content $SchemaXml)
	
		$schema = [Microsoft.MetadirectoryServices.Schema]::Create()

		foreach ($t in $x.Schema.Types.SchemaType)
		{
			$lockAnchorDefinition = $true
		
			if ($t.LockAnchorDefinition -eq "0")
			{
				$lockAnchorDefinition = $false
			}
		
			$schemaType = [Microsoft.MetadirectoryServices.SchemaType]::Create($t.Name, $lockAnchorDefinition)

			if ($t.GetElementsByTagName("PossibleDNComponentsForProvisioning").Count -gt 0)
			{
				foreach ($c in $t.PossibleDNComponentsForProvisioning)
				{
					$schemaType.PossibleDNComponentsForProvisioning.Add($c)
				}
			}

			foreach ($a in $t.Attributes.SchemaAttribute)
			{
				if ($a.IsAnchor -eq 1)
				{
					$schemaType.Attributes.Add([Microsoft.MetadirectoryServices.SchemaAttribute]::CreateAnchorAttribute($a.Name, $a.DataType, $a.AllowedAttributeOperation))
				}
				elseif ($a.IsMultiValued -eq 1)
				{
					$schemaType.Attributes.Add([Microsoft.MetadirectoryServices.SchemaAttribute]::CreateMultiValuedAttribute($a.Name, $a.DataType, $a.AllowedAttributeOperation))
				}
				else
				{
					$schemaType.Attributes.Add([Microsoft.MetadirectoryServices.SchemaAttribute]::CreateSingleValuedAttribute($a.Name, $a.DataType, $a.AllowedAttributeOperation))
				}
			}

			$schema.Types.Add($schemaType)
		}

		return $schema
	}
}

function Get-CSEntryChangeValue
{
	&lt;#
	.Synopsis
		Gets the value of the specified attribute of the CSEntryChange object.
	.Description
		Gets the value of the specified attribute of the CSEntryChange object.
	.Example
		Get-CSEntryChangeValue -CSEntryChange $csentryChange -AttributeName "RegistrarPool"
	.Example
		Get-CSEntryChangeValue -CSEntryChange $csentryChange -AttributeName "RegistrarPool" -DefaultValue "pool01.contoso.com"
	.Example
		Get-CSEntryChangeValue -CSEntryChange $csentryChange -AttributeName "RegistrarPool" -DefaultValue "pool01.contoso.com" -OldValue
	#&gt;

	[CmdletBinding()]
	[OutputType([object])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[string]
		$AttributeName,
		[parameter(Mandatory = $false)]
		[object]
		$DefaultValue = $null,
		[parameter(Mandatory = $false)]
		[switch]
		$OldValue
	)

	process
	{
		if ($CSEntryChange.AttributeChanges.Contains($AttributeName))
		{
			$returnDefault = $true
		
			$attributeChange = $CSEntryChange.AttributeChanges[$AttributeName]
		
			foreach ($valueChange in $attributeChange.ValueChanges)
			{
				if ($OldValue)
				{
					if ($valueChange.ModificationType -eq "Delete")
					{
						$valueChange.Value # add to return pipeline
						$returnDefault = $false
					}
				}
				else
				{
					if ($valueChange.ModificationType -eq "Add")
					{
						$valueChange.Value # add to return pipeline
						$returnDefault = $false
					}
				}
			}

			if ($returnDefault)
			{
				$DefaultValue # return
			}
		}
		else
		{
			$DefaultValue # return
		}
	}
}

function Get-CSEntryChangeValueIfChanged
{
	&lt;#
	.Synopsis
		Gets the new value of the specified attribute of the CSEntryChange object if it was changed.
	.Description
		Gets the new value of the specified attribute of the CSEntryChange object if it was changed.
	.Example
		Get-CSEntryChangeValue -CSEntryChangeValue $csentryChange -AttributeName "RegistrarPool"
	#&gt;
	
	[CmdletBinding()]
	[OutputType([object])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[string]
		$AttributeName
	)

	process
	{
		$returnValue = $null
	
		if ($CSEntryChange.AttributeChanges.Contains($AttributeName))
		{
			$oldAttributeValue = $null
			$newAttributeValue = $null
		
			$attributeChange = $CSEntryChange.AttributeChanges[$AttributeName]
		
			if ($attributeChange.IsMultiValued)
			{
				throw "Support for multivalued attribute is not implemented in this function. Attribute Name: $AttributeName."
			}
		
			foreach ($valueChange in $attributeChange.ValueChanges)
			{
				if ($valueChange.ModificationType -eq "Delete")
				{
					$oldAttributeValue = $valueChange.Value
				}
				elseif ($valueChange.ModificationType -eq "Add")
				{
					$newAttributeValue = $valueChange.Value
				}
			}

			if ($oldAttributeValue -cne $newAttributeValue)
			{
				$returnValue = $newAttributeValue
			}
		}
	
		return $returnValue
	}
}

function Test-CSEntryChangeValueChanged
{
	&lt;#
	.Synopsis
		Tests if the value of the specified attribute of the CSEntryChange object was changed.
	.Description
		Tests if the value of the specified attribute of the CSEntryChange object was changed.
	.Example
		Get-CSEntryChangeValue -CSEntryChangeValue $csentryChange -AttributeName "RegistrarPool"
	.Example
		Get-CSEntryChangeValue -CSEntryChangeValue $csentryChange -AttributeName "RegistrarPool" -IgnoreCase
	#&gt;
	
	[CmdletBinding()]
	[OutputType([bool])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[string]
		$AttributeName,
		[parameter(Mandatory = $false)]
		[switch]
		$IgnoreCase
	)
	
	process
	{
		$valueChanged = $false
	
		if ($CSEntryChange.AttributeChanges.Contains($AttributeName))
		{
			$oldAttributeValue = $null
			$newAttributeValue = $null
		
			$attributeChange = $CSEntryChange.AttributeChanges[$AttributeName]
		
			if ($attributeChange.IsMultiValued)
			{
					throw "Support for multivalued attribute is not implemented in this function. Attribute Name: $AttributeName."
			}
		
			foreach ($valueChange in $attributeChange.ValueChanges)
			{
				if ($valueChange.ModificationType -eq "Delete")
				{
					$oldAttributeValue = $valueChange.Value
				}
				elseif ($valueChange.ModificationType -eq "Add")
				{
					$newAttributeValue = $valueChange.Value
				}
			}

			if ($IgnoreCase)
			{
				if ($oldAttributeValue -ne $newAttributeValue)
				{
					$valueChanged = $true
				}
			}
			else
			{
				if ($oldAttributeValue -cne $newAttributeValue)
				{
					$valueChanged = $true
				}
			}
		}
	
		return $valueChanged
	}
}

function Test-CSEntryChangeAttributeDeleted
{
	&lt;#
	.Synopsis
		Tests if the value of the specified attribute of the CSEntryChange object was deleted.
	.Description
		Tests if the value of the specified attribute of the CSEntryChange object was deleted.
	.Example
		Get-CSEntryChangeValue -CSEntryChangeValue $csentryChange -AttributeName "RegistrarPool"
	#&gt;
	
	[CmdletBinding()]
	[OutputType([bool])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[string]
		$AttributeName
	)

	process
	{
		$attributeDeleted = $false
	
		if ($CSEntryChange.AttributeChanges.Contains($AttributeName))
		{
			$attributeChange = $CSEntryChange.AttributeChanges[$AttributeName]
		
			if ($attributeChange.ModificationType -eq "Delete")
			{
				$attributeDeleted = $true
			}
		}
	
		return $attributeDeleted
	}
}

function Get-CSEntryChangeDN
{
	&lt;#
	.Synopsis
		Gets the DN of the CSEntryChange object.
	.Description
		Gets the DN of the CSEntryChange object.
	.Example
		Get-CSEntryChangeValue -CSEntryChangeValue $csentryChange
	#&gt;

	[CmdletBinding()]
	[OutputType([string])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)
	process
	{
		return Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "DN" -DefaultValue $csentryChange.DN
	}
}

function Get-ConfigParameter
{
	&lt;#
	.Synopsis
		Gets the value of a configuration parameter.
	.Description
		Gets the value of a configuration parameter.
		If the "Scope" parameter is not specified, the value is looked up in "RunStep", "Partition", "Global", "Connectivity" in that order.
	.Example
		Get-ConfigParameter -ConfigParameters $configParameters -ParameterName $parameterName
	.Example
		Get-ConfigParameter -ConfigParameters $configParameters -ParameterName $parameterName -Scope "Connectivity"
	.Example
		Get-ConfigParameter -ConfigParameters $configParameters -ParameterName $parameterName -Scope "Connectivity" -Encrypted
	#&gt;

	[CmdletBinding()]
	[OutputType([string])]
	param (
		[parameter(Mandatory = $true)]
		[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
		$ConfigParameters,
		[parameter(Mandatory = $true)]
		[string]
		$ParameterName,
		[parameter(Mandatory = $false)]
		[ValidateSet("RunStep", "Partition", "Global", "Connectivity", "")]
		[string]
		$Scope,
		[parameter(Mandatory = $false)]
		[switch]
		$Encrypted
	)

	process
	{
		$configParameterValue = $null

		if ([string]::IsNullOrEmpty($Scope))
		{
			$configParameterValue = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName $ParameterName -Scope "RunStep" -Encrypted:$Encrypted

			if ([string]::IsNullOrEmpty($configParameterValue))
			{
				$configParameterValue = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName $ParameterName -Scope "Partition" -Encrypted:$Encrypted

				if ([string]::IsNullOrEmpty($configParameterValue))
				{
					$configParameterValue = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName $ParameterName -Scope "Global" -Encrypted:$Encrypted

					if ([string]::IsNullOrEmpty($configParameterValue))
					{
						$configParameterValue = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName $ParameterName -Scope "Connectivity" -Encrypted:$Encrypted
					}
				}
			}
		}
		elseif ($Scope -eq "RunStep" -or $Scope -eq "Partition" -or $Scope -eq "Global" -or "Connectivity")
		{
			if ($Scope -eq "RunStep" -or $Scope -eq "Partition" -or $Scope -eq "Global")
			{
				$configParameterName = "{0}_{1}" -f $ParameterName, $Scope
			}
			else
			{
				$configParameterName = $ParameterName
			}

			if ($ConfigParameters.Contains($configParameterName))
			{
				if ($Encrypted -ne $true)
				{
					$configParameterValue =  $ConfigParameters[$configParameterName].Value

					if (![string]::IsNullOrEmpty($configParameterValue))
					{
					   $configParameterValue = $configParameterValue.Trim() 
					}

					Write-Verbose ("ConfigParameter: Scope={0}, Name={1}, Value={2}" -f $Scope, $ParameterName, $configParameterValue)
				}
				else
				{
					$configParameterValue =  $ConfigParameters[$configParameterName].SecureValue

					Write-Verbose ("ConfigParameter: Scope={0}, Name={1}, Value={2}" -f $Scope, $ParameterName, "***Encrypted***")
				}
			}
		}
		else
		{
			throw "Invalid ConfigurationParameter scope: $Scope"
		}

		return $configParameterValue
	}
}

#region Import Helpers

function New-CSEntryChange
{
	&lt;#
	.Synopsis
		Creates a new CSEntryChange object from the specified InputObject
	.Description
		Creates a new CSEntryChange object from the specified InputObject.
		The function expects the DN to be $InputObject.DistinguishedName and
		the property names to be same as schema attribute names.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Microsoft.MetadirectoryServices.CSEntryChange])]
	param(
		[parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[ValidateNotNull()]
		[object]
		$InputObject,
		[parameter(Mandatory = $true)]
		[string]
		$ObjectType,
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.Schema]
		$Schema
	)

	$csentry = [Microsoft.MetadirectoryServices.CSEntryChange]::Create()
	$csentry.ObjectModificationType = "Add"
	$csentry.ObjectType = $ObjectType
	$csentry.DN = $InputObject.DistinguishedName

	foreach ($attribute in $schema.Types[$csentry.ObjectType].Attributes)
	{
		Write-Debug ("Processing CSEntry: '{0}'. Attribute: '{1}'." -f $csentry.DN, $attribute.Name)

		$attributeVal = $InputObject.($attribute.Name)

		Write-Debug ("Processing CSEntry: '{0}'. Attribute: '{1}'. Attribute Value: '{2}'." -f $csentry.DN, $attribute.Name, $attributeVal)

		if ($attributeVal -ne $null)
		{
			if ($attributeVal -is [System.Collections.ArrayList]) # do not compare array with [string]::Empty as 0 is treated as empty string in PowerShell.
			{
				if ($attributeVal.Count -eq 0)
				{
					$attributeVal = $null
				}
			}
			elseif (($attribute.DataType -eq "String" -or  $attribute.DataType -eq "Reference") -and $attributeVal -eq [string]::Empty)
			{
				$attributeVal = $null
			}
			elseif ($attribute.DataType -eq "Integer" -and $attributeVal -eq [string]::Empty)
			{
				$attributeVal = $null
			}
			elseif ($attribute.DataType -eq "Boolean" -and $attributeVal -eq [string]::Empty)
			{
				$attributeVal = $false
			}
		}

		if ($attributeVal -ne $null)
		{
			if ($attributeVal -is [System.Collections.ArrayList])
			{	
				$attributeVal = [string[]] $attributeVal # TODO: Support other multi-valued datatypes
			}
			else
			{
				if ($attribute.DataType -eq "Binary")
				{
					if ($attributeVal -is [Guid])
					{
						$attributeVal = $attributeVal.ToByteArray()
					}
				}
			}

			try
			{
				if ($attribute.IsAnchor)
				{
					$csentry | Add-CSEntryAnchorAttribute -AttributeName $attribute.Name -AttributeValue $attributeVal
				}
				else
				{
					$csentry | Add-CSEntryAttributeChange -AttributeModificationType "Add" -AttributeName $attribute.Name -AttributeValue $attributeVal
				}
			}
			catch
			{
				$e = "Error with property: " + $attribute.Name + ". Error: " + $_.Exception.ToString()
				Write-Debug $e
			}
		}
		else
		{
			Write-Verbose ("Skipped populating null or empty attribute: {0}" -f $attribute.Name)
		}
	}

	return $csentry
}

function Add-CSEntryAnchorAttribute
{
	&lt;#
	.Synopsis
		Adds the specified anchor attribute to the specified CSEntryChange object.
	.Description
		Adds the specified anchor attribute to the specified CSEntryChange object.
	.Example
	#&gt;

	[CmdletBinding()]
	param(
		[parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[string]
		$AttributeName,
		[parameter(Mandatory = $true)]
		[object]
		$AttributeValue
	)

	process
	{
		[void] $CSEntryChange.AnchorAttributes.Add([Microsoft.MetadirectoryServices.AnchorAttribute]::Create($AttributeName, $AttributeValue))
	}
}

function Add-CSEntryAttributeChange
{
	&lt;#
	.Synopsis
		Adds the specified attribute change to the specified CSEntryChange object.
	.Description
		Adds the specified attribute change to the specified CSEntryChange object.
	.Example
		$csentry | Add-CSEntryAttributeChange -AttributeModificationType "Add" -AttributeName $attribute.Name -AttributeValue $attributeVal
	#&gt;

	[CmdletBinding()]
	param(
		[parameter(Mandatory = $true, ValueFromPipeline = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange,
		[parameter(Mandatory = $true)]
		[ValidateSet("Add", "Update", "Delete", "Replace", "Rename")]
		[string]
		$AttributeModificationType,
		[parameter(Mandatory = $false)]
		[ValidateNotNullOrEmpty()]
		[string]
		$AttributeName,
		[parameter(Mandatory = $false)]
		[object]
		$AttributeValue
	)

	process
	{
		if ($AttributeModificationType -ne 'Rename' -and $AttributeName -eq $null)
		{
			throw ("AttributeName parameter is required. AttributeModificationType: {0}. CSEntry: {1}." -f $AttributeModificationType, $CSEntryChange)
		}

		if ($AttributeModificationType -ne 'Delete' -and $AttributeValue -eq $null)
		{
			throw ("AttributeValue parameter is required. AttributeModificationType: {0}. CSEntry: {1}." -f $AttributeModificationType, $CSEntryChange)
		}

		switch ($AttributeModificationType)
		{
			'Add'
			{
				[void] $CSEntryChange.AttributeChanges.Add([Microsoft.MetadirectoryServices.AttributeChange]::CreateAttributeAdd($AttributeName, $AttributeValue))
			}
			'Update'
			{
				[void] $CSEntryChange.AttributeChanges.Add([Microsoft.MetadirectoryServices.AttributeChange]::CreateAttributeUpdate($AttributeName, $AttributeValue))
			}
			'Delete'
			{
				[void] $CSEntryChange.AttributeChanges.Add([Microsoft.MetadirectoryServices.AttributeChange]::CreateAttributeDelete($AttributeName))
			}
			'Replace'
			{
				[void] $CSEntryChange.AttributeChanges.Add([Microsoft.MetadirectoryServices.AttributeChange]::CreateAttributeReplace($AttributeName, $AttributeValue))
			}
			'Rename'
			{
				[void] $CSEntryChange.AttributeChanges.Add([Microsoft.MetadirectoryServices.AttributeChange]::CreateNewDN($AttributeValue))
			}
			default
			{
				throw ("AttributeModificationType: {0} is not handled. AttributeName: {1}. CSEntry: {2}." -f $AttributeModificationType, $AttributeName, $CSEntryChange)
			}
		}
	}
}

#endregion

#region Export Helpers

function New-CSEntryChangeExportError
{
	&lt;#
	.Synopsis
		Creates a new CSEntryChangeResult object for the specified CSEntryChange and specified error.
	.Description
		Creates a new CSEntryChangeResult object for the specified CSEntryChange and specified error.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Microsoft.MetadirectoryServices.CSEntryChangeResult])]
	param(
		[parameter(Mandatory = $true)]
		[Guid]
		$CSEntryChangeIdentifier,
		[parameter(Mandatory = $true)]
		[object]
		$ErrorObject
	)

	$csentryChangeResult = $null

	try
	{
		foreach ($cmdStatus in $ErrorObject)
		{
			$exception = $cmdStatus.GetBaseException()
			$exceptionType = $exception.GetType().Name
			$exceptionMessage = $exception.Message

			Write-Warning ("CSEntry Identifier: {0}. ErrorName: {1}. ErrorDetail: {2}" -f $CSEntryChangeIdentifier, $exceptionType, $exceptionMessage)
			$csentryChangeResult = [Microsoft.MetadirectoryServices.CSEntryChangeResult]::Create($CSEntryChangeIdentifier, $null, "ExportErrorCustomContinueRun", $exceptionType, $exceptionMessage)
			Write-Warning ("CSEntryChangeResult Identifier: {0}. ErrorCode: {1}. ErrorName: {2}. ErrorDetail: {3}" -f $csentryChangeResult.Identifier, $csentryChangeResult.ErrorCode, $csentryChangeResult.ErrorName, $csentryChangeResult.ErrorDetail)
					
			break # report the first error and stop
		}
	}
	catch
	{
		foreach ($cmdStatus in $ErrorObject)
		{
			$exceptionType = "RUNTIME_EXCEPTION"
			$exceptionMessage = $cmdStatus.ToString()
			Write-Warning ("CSEntry Identifier: {0}. Error: {1}" -f $CSEntryChangeIdentifier, $exceptionMessage)
			$csentryChangeResult = [Microsoft.MetadirectoryServices.CSEntryChangeResult]::Create($CSEntryChangeIdentifier, $null, "ExportErrorCustomContinueRun", $exceptionType, $exceptionMessage)
			Write-Warning ("CSEntryChangeResult Identifier: {0}. ErrorCode: {1}. ErrorName: {2}. ErrorDetail: {3}" -f $csentryChangeResult.Identifier, $csentryChangeResult.ErrorCode, $csentryChangeResult.ErrorName, $csentryChangeResult.ErrorDetail)

			break # report the first error and stop
		}
	}

	return $csentryChangeResult
}

function New-CSEntryChangeResult
{
	&lt;#
	.Synopsis
		Creates a new CSEntryChangeResult object for the specified CSEntryChange.
	.Description
		Creates a new CSEntryChangeResult object for the specified CSEntryChange.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Microsoft.MetadirectoryServices.CSEntryChangeResult])]
	param(
		[parameter(Mandatory = $true)]
		[Guid]
		$CSEntryChangeIdentifier,
		[parameter(Mandatory = $false)]
		[Hashtable]
		$NewAnchorTable,
		[Switch]
		$ExportAdd
	)
	
	$attributeChanges = $null

	if ($ExportAdd)
	{
		if ($NewAnchorTable -eq $null -or $NewAnchorTable.Keys.Count -eq 0)
		{
			throw "The NewAnchorTable parameter must not be null."
		}

		foreach ($anchor in $NewAnchorTable.Keys)
		{
			$anchorValue = $NewAnchorTable[$anchor]

			$attributeChanges = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.AttributeChange
			$anchorAttribute = [Microsoft.MetadirectoryServices.AttributeChange]::CreateAttributeAdd($anchor, $anchorValue)
			$attributeChanges.Add($anchorAttribute)
		}
	}

	$csentryChangeResult = [Microsoft.MetadirectoryServices.CSEntryChangeResult]::Create($CSEntryChangeIdentifier, $attributeChanges, "Success")

	return $csentryChangeResult
}

#endregion Export Helpers

function Select-PreferredDomainController
{
	&lt;#
	.Synopsis
		Selects the preferred domain controller that is online from the specified comma-separated list of preferred domain controllers.
	.Description
		Selects the preferred domain controller that is online from the specified comma-separated list of preferred domain controllers.
	.Example
		Select-PreferredDomainController -$DomainControllerList $PreferredDomainController
	#&gt;

	[CmdletBinding()]
	[OutputType([string])]
	param (
		[parameter(Mandatory = $false)]
		[string]
		$DomainControllerList
	)

	process
	{
		if (![string]::IsNullOrEmpty($DomainControllerList))
		{
			$selected = $false

			foreach ($preferredDC in $DomainControllerList.Split(","))
			{
				if (![string]::IsNullOrEmpty($preferredDC))
				{
					try
					{
						$preferredDC =$preferredDC.Trim()
						$conn = New-Object "Net.Sockets.TcpClient"
						$conn.Connect($preferredDC, 389)
						$selected = $true

						Write-Debug ("Preferred Domain Controller is: {0}." -f $preferredDC)

						break
					}
					catch
					{
						Write-Warning ("Domain Controller {0} is unavailable." -f $preferredDC)
					}
				}
			}

			if ($selected)
			{
				return $preferredDC
			}
			else
			{
				throw [Microsoft.MetadirectoryServices.ServerDownException] ("None of the servers from the Preferred Domain Controller List '{0}' is online." -f $DomainControllerList)
			}
		}
	}
}

Export-ModuleMember -Function * -Variable *
</parameter><parameter name="Validation Script" type="text" use="connectivity">&lt;#
&lt;copyright file="ValidationScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Validation script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.ConfigParameterPage]
	$ConfigParameterPage,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = (Join-Path -Path $env:windir -ChildPath "TEMP") # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$Global:DebugPreference = "Continue"
$Global:VerbosePreference = "Continue"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Validation"

function Test-ConfigParameterPage
{
	&lt;#
	.Synopsis
		Validates the input entries on the current Config Parameter Page.
	.Description
		Validates the input entries on the current Config Parameter Page.
	#&gt;

	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.ParameterValidationResult])]
	param (
	)
	
	$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList "Success", $null, $null

	Write-Debug "Validating Settings: $ConfigParameterPage"

	switch ($ConfigParameterPage)
	{
		"Connectivity"
		{
			$validationResult = Test-ConnectivityConfigParameterPage $_
			break
		}

		"Global"
		{
			$validationResult = Test-GlobalConfigParameterPage
			break
		}

		"Partition"
		{
			$validationResult = Test-ConnectivityConfigParameterPage $_
			break
		}

		"RunStep"
		{
			break
		}
	}

	return $validationResult
}

function Test-ConnectivityConfigParameterPage
{
	&lt;#
	.Synopsis
		Validates the input entries on the Connectivity Config Parameter Page.
	.Description
		Validates the input entries on the Connectivity Config Parameter Page.
	#&gt;

	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.ParameterValidationResult])]
	param (
	[parameter(Mandatory = $false)]
	[ValidateSet("Partition", "Connectivity", "")]
	[string]
	$Scope
	)

	$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList "Success", $null, $null

	$Scope = $null # this will cause Get-ConfigParameter to return values configured in the "upper" scope if not defined on the current scope.
	$impersonateConnectorAccount = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Impersonate Connector Account" -Scope $Scope
	$server = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Server" -Scope $Scope
	$domain = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Domain" -Scope $Scope
	$user = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "User" -Scope $Scope
	$password = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Password" -Scope $Scope -Encrypted

	Write-Debug ("Validating $Scope settings. ImpersonateConnectorAccount: '{0}'. Server: '{1}'. Domain: '{2}'. User: '{3}'." -f $impersonateConnectorAccount, $server, $domain, $user)

	if ($impersonateConnectorAccount -eq "1")
	{
		$statusCode = "Failure"
		$errorParameter = "Impersonate Connector Account"
		$errorMessage = "Please uncheck {0} checkbox." -f $errorParameter

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}

	if ([string]::IsNullOrEmpty($server))
	{
		$statusCode = "Failure"
		$errorParameter = "Server"
		$errorMessage = "Please specify a value for {0} field." -f $errorParameter

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}
	elseif ([string]::IsNullOrEmpty($user))
	{
		$statusCode = "Failure"
		$errorParameter = "User"
		$errorMessage = "Please specify a value for {0} field." -f $errorParameter

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}
	elseif ([string]::IsNullOrEmpty($password))
	{
		$statusCode = "Failure"
		$errorParameter = "Password"
		$errorMessage = "Please specify a value for {0} field." -f $errorParameter

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}
	elseif ([string]::IsNullOrEmpty($domain))
	{
		$statusCode = "Failure"
		$errorParameter = "Domain"
		$errorMessage = "Please specify a value for {0} field." -f $errorParameter

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}
	else
	{
		if (![string]::IsNullOrEmpty($domain))
		{
			$user = "$domain\$user"
		}

		$Credential = New-Object System.Management.Automation.PSCredential($user, $password)

		$statusCode = "Failure"
		$errorParameter = "Server"
		$errorMessage = $null

		$skipCertificate = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
		$session = New-PSSession -ConnectionUri $server -Credential $Credential -SessionOption $skipCertificate -Name $Global:RemoteSessionName -ErrorVariable errorMessage -ErrorAction SilentlyContinue

		if ($errorMessage.Count -gt 0)
		{
			$errorMessage = [string]$errorMessage[0] + "`r`nConnector User: $user"

			$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter

			$Error.Clear()
		}
		else
		{
			Remove-PSSession $session
		}
	}

	return $validationResult
}


function Test-GlobalConfigParameterPage
{
	&lt;#
	.Synopsis
		Validates the input entries on the Global Config Parameter Page.
	.Description
		Validates the input entries on the Global Config Parameter Page.
	#&gt;

	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.ParameterValidationResult])]
	param (
	)

	$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList "Success", $null, $null
	
	$scope = "Global"
	$sipAddressType = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "SipAddressType" -Scope $scope
	$sipDomain = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "SipDomain" -Scope $scope

	Write-Debug ("Validating Global settings. SipAddressType: '{0}'. SipDomain: '{1}'." -f $sipAddressType, $sipDomain)

	if ($sipAddressType -ne "UserPrincipalName" -and $sipAddressType -ne "EmailAddress" -and $sipAddressType -ne "FirstLastName" -and $sipAddressType -ne "SamAccountName")
	{
		$statusCode = "Failure"
		$errorParameter = "SipAddressType_Global"
		$errorMessage = "SipAddressType must be one of the values: UserPrincipalName, EmailAddress, FirstLastName, SamAccountName"

		$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
	}
	elseif ($sipAddressType -eq "FirstLastName" -or $sipAddressType -eq "SamAccountName")
	{
		if ([string]::IsNullOrEmpty($sipDomain))
		{
			$statusCode = "Failure"
			$errorParameter = "SipDomain_Global"
			$errorMessage = "When SipAddressType = $sipAddressType, SipDomain must be configured as well."

			$validationResult = New-Object -TypeName "Microsoft.MetadirectoryServices.ParameterValidationResult" -ArgumentList $statusCode, $errorMessage, $errorParameter
		}
	}

	return $validationResult
}

Test-ConfigParameterPage

Exit-Script -ScriptType "Validation"
</parameter><parameter name="Schema Script" type="text" use="connectivity">&lt;#
&lt;copyright file="SchemaScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Schema script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param(
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = (Join-Path -Path $env:windir -ChildPath "TEMP") # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$Global:DebugPreference = "Continue"
$Global:VerbosePreference = "Continue"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Schema"

function Get-ConnectorSchema
{
	&lt;#
	.Synopsis
		Gets the connector space schema.
	.Description
		Gets the connector space schema defined in the "Schema-Lync.xml" file.
	#&gt;

	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.Schema])]
	param (
	)

	$extensionsDir = Get-ExtensionsDirectory
	$schemaXml = Join-Path -Path $extensionsDir -ChildPath "Schema-Lync.xml"

	$schema = ConvertFrom-SchemaXml -SchemaXml $schemaXml

	return $schema
}

Get-ConnectorSchema

Exit-Script -ScriptType "Schema"
</parameter><parameter name="Additional Config Parameter Names" type="string" use="connectivity">SipAddressType,SipDomain,ForceMove,UserPages, OrganizationalUnitPages,PreferredDomainControllerFQDN, LastRunDateTimeOffsetMinute</parameter><parameter name="Additional Encrypted Config Parameter Names" type="string" use="connectivity"></parameter><parameter name="Partition Script" type="text" use="global">&lt;#
&lt;copyright file="PartitionScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Partition script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = (Join-Path -Path $env:windir -ChildPath "TEMP") # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$Global:DebugPreference = "Continue"
$Global:VerbosePreference = "Continue"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Partition"

function Get-Partitions
{
	&lt;#
	.Synopsis
		Gets the partitions in the forest to which the connector service account belongs.
	.Description
		Gets the partitions in the forest to which the connector service account belongs.
	#&gt;

	[CmdletBinding()]
    [OutputType([System.Collections.Generic.List[Microsoft.MetadirectoryServices.Partition]])]
	param (
	)
	
	$partitions = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.Partition

	$userName = "{0}\{1}" -f $Credential.GetNetworkCredential().Domain, $Credential.GetNetworkCredential().UserName
	$password = $Credential.GetNetworkCredential().Password

	$rootDSEQuery = "LDAP://{0}/rootDSE" -f $preferredDomainController

	Write-Debug "Enumerating Directory Partitions. RootDSE: '$rootDSEQuery'."

	$rootDSE = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $rootDSEQuery, $userName, $password

	if ([string]::IsNullOrEmpty($password)) # Check for a bug in ECMA 2.0 on refreshing partion, apparently fixed now.
	{
		# Try with SyncService credentials - work around for the bug in ECMA 2.0, apparently not needed now.
		Write-Debug "Hitting ECMA 2.0 bug. Trying with SyncSerice credentials to connect to RootDSE: '$rootDSEQuery'."

		$rootDSE = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $rootDSEQuery
	}

	if (!$rootDSE)
	{
		throw "Unable to get RootDSE."
	}

	$configurationContainer = $rootDSE.Properties["configurationnamingcontext"].Value.ToString();

	$searchRootQuery = "LDAP://{0}/CN=Partitions,{1}" -f $preferredDomainController, $configurationContainer

	Write-Debug "Enumerating Directory Partitions. Configuration Container: '$searchRootQuery'."

	$searchRoot = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $searchRootQuery, $userName, $password

	if ([string]::IsNullOrEmpty($password)) # Check for a bug in ECMA 2.0 on refreshing partion, apparently fixed now.
	{
		# Try with SyncService credentials - work around for the bug in ECMA 2.0, apparently not needed now.
		Write-Debug "Hitting ECMA 2.0 bug. Trying with SyncSerice credentials to connect to Configuration Container: '$searchRootQuery'."

		$searchRoot = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $searchRootQuery
	}

	$ds = [adsisearcher]"(NETBIOSName=*)"
	$ds.searchroot = $searchRoot
	$ds.PageSize = 1000 
	$ds.SearchScope = "OneLevel"
	$props= "ncname", "netbiosName", "objectguid"
	$ds.PropertiesToLoad.AddRange($props)

	$directoryPartitions = $ds.FindAll()

	foreach ($directoryPartition in $directoryPartitions)
	{
		$props = $directoryPartition.Properties

		# Property names case sensitive, beware!! Must be spelt as defined in $props variable
		if (![string]::IsNullOrEmpty($props.netbiosname))
		{
			$objectGuid = $props.objectguid | foreach { "{0:X2}" -f $_}
			$identifier = [Guid] $objectGuid.Replace(" ", "")
			$dn = $props.ncname
			$name = $props.ncname
			$partition = [Microsoft.MetadirectoryServices.Partition]::Create($identifier, $dn, $name)
			$partition.HiddenByDefault = $false

			[void] $partitions.Add($partition)
		}
	}

	return ,$partitions # Prevent unwinding
}

$preferredDomainController = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "PreferredDomainControllerFQDN"

if (![string]::IsNullOrEmpty($preferredDomainController))
{
	$preferredDomainController = Select-PreferredDomainController -DomainControllerList $preferredDomainController
}

if ([string]::IsNullOrEmpty($preferredDomainController))
{
	$preferredDomainController = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Domain" # Do this only in the partition script. This is not needed when object DN is available.
}

Get-Partitions

Exit-Script -ScriptType "Partition"
</parameter><parameter name="Hierarchy Script" type="text" use="global">&lt;#
&lt;copyright file="HierarchyScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Hierarchy script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.HierarchyNode]
	$HierarchyNode,
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = (Join-Path -Path $env:windir -ChildPath "TEMP") # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$Global:DebugPreference = "Continue"
$Global:VerbosePreference = "Continue"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Hierarchy"

function Get-Hierarchy
{
	&lt;#
	.Synopsis
		Gets the OU hierarchy under the selected node.
	.Description
		Gets the OU hierarchy under the selected node.
	#&gt;

	[CmdletBinding()]
    [OutputType([System.Collections.Generic.List[Microsoft.MetadirectoryServices.HierarchyNode]])]
	param (
	)

	$children = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.HierarchyNode

	$rootDN = $HierarchyNode.DN

	if ([string]::IsNullOrEmpty($preferredDomainController))
	{
		$searchPath = "LDAP://{0}" -f $rootDN
	}
	else
	{
		$searchPath = "LDAP://{0}/{1}" -f $preferredDomainController, $rootDN
	}

	Write-Debug "Enumerating Inclusion OrganizationalUnit Hierarchy $searchPath"

	$userName = "{0}\{1}" -f $Credential.GetNetworkCredential().Domain, $Credential.GetNetworkCredential().UserName
	$password = $Credential.GetNetworkCredential().Password
	$searchRoot = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $searchPath, $userName, $password

	if ([string]::IsNullOrEmpty($password)) # Check for a bug in ECMA 2.0 on refreshing partion, apparently fixed now.
	{
		# Try with SyncService credentials - work around for the bug in ECMA 2.0, apparently not needed now.
		Write-Debug "Hitting ECMA 2.0 bug. Trying with SyncSerice credentials to connect to OrganizationalUnit Hierarchy: '$searchPath'."

		$searchRoot = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $searchPath
	}

	$ds = [adsisearcher]"(|(objectClass=organizationalUnit)(objectClass=Container))"
	$ds.searchroot = $searchRoot
	$ds.PageSize = 1000 
	$ds.SearchScope = "OneLevel"
	$props= "name", "distinguishedname"
	$ds.PropertiesToLoad.AddRange($props)

	$results = $ds.FindAll()

	foreach ($result in $results)
	{
		$props = $result.Properties

		# Property names case sensitive, beware!! Must be spelt as defined in $props variable
		$dn = $props.distinguishedname 
		$name = $props.name
		[void] $children.Add([Microsoft.MetadirectoryServices.HierarchyNode]::Create($dn, $name))
	}

	return ,$children # Prevent unwinding
}

$preferredDomainController = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "PreferredDomainControllerFQDN"

if (![string]::IsNullOrEmpty($preferredDomainController))
{
	$preferredDomainController = Select-PreferredDomainController -DomainControllerList $preferredDomainController
}

Get-Hierarchy

Exit-Script -ScriptType "Hierarchy"
</parameter><parameter name="Begin Import Script" type="text" use="global">&lt;#
&lt;copyright file="Begin-ImportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Begin-Import script for the Skype 2015 / Lync 2010 / 2013 Connector.
	Opens the RPS session and imports a set of Lync cmdlets into it.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenImportConnectionRunStep]
	$OpenImportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Begin-Import"

function Get-OpenImportConnectionResults
{
	&lt;#
	.Synopsis
		Gets the OpenImportConnectionResults object.
	.Description
		Gets the OpenImportConnectionResults object.
		The OpenImportConnectionResults object contains the watermark xml ot be used in the import script.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([System.Collections.Generic.List[Microsoft.MetadirectoryServices.OpenImportConnectionResults]])]
	param (
	)
	
	$watermark = Get-WaterMark

	$results = New-Object Microsoft.MetadirectoryServices.OpenImportConnectionResults($watermark.InnerXml)

	return $results
}

function Get-WaterMark
{
	&lt;#
	.Synopsis
		Gets the WaterMark XML.
	.Description
		Gets the WaterMark XML.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([xml])]
	param (
	)
	
	$waterMarkXml = $null

	if (!$deltaImport -or [string]::IsNullOrEmpty($OpenImportConnectionRunStep.CustomData))
	{
		$waterMarkXml = "&lt;WaterMark&gt;"
		$waterMarkXml += "&lt;CurrentPageIndex&gt;0&lt;/CurrentPageIndex&gt;"

		foreach ($type in $Schema.Types)
		{
			$waterMarkXml += "&lt;{0}&gt;&lt;MoreToImport&gt;1&lt;/MoreToImport&gt;&lt;/{0}&gt;" -f $type.Name
		}

		$waterMarkXml += "&lt;PreferredDomainController&gt;{0}&lt;/PreferredDomainController&gt;" -f $preferredDomainController
		$waterMarkXml += "&lt;LastRunDateTime&gt;&lt;/LastRunDateTime&gt;"
		$waterMarkXml += "&lt;/WaterMark&gt;"

		$waterMark = [xml]$waterMarkXml
	}
	else
	{
		$waterMark = [xml]$OpenImportConnectionRunStep.CustomData

		if ($waterMark -eq $null -or $waterMark.WaterMark -eq $null)
		{
			throw ("Invalid Watermark. Please run Full Import first.")
		}

		$waterMark.WaterMark.CurrentPageIndex = "0"
		
		foreach ($type in $Schema.Types)
		{
			$waterMark.WaterMark.($type.Name).MoreToImport = "1"
		}
	}

	Write-Debug ("Watermark initialized to: {0}" -f $waterMark.InnerXml)

	return $waterMark
}

$fullObjectImport  = $OpenImportConnectionRunStep.ImportType -eq "FullObject"
if ($fullObjectImport)
{
	throw ("Operation Type {0} Import is not supported" -f $OpenImportConnectionRunStep.ImportType)
}

$fullImport = $OpenImportConnectionRunStep.ImportType -eq "Full"
$deltaImport = $OpenImportConnectionRunStep.ImportType -eq "Delta"

$server = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Server"
$preferredDomainController = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "PreferredDomainControllerFQDN"

if (![string]::IsNullOrEmpty($preferredDomainController))
{
	$preferredDomainController = Select-PreferredDomainController -DomainControllerList $preferredDomainController
}

$session = Get-PSSession -Name $Global:RemoteSessionName -ErrorAction "SilentlyContinue"

if (!$session)
{
	Write-Debug "Opening a new RPS Session."

	$skipCertificate = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
	$session = New-PSSession -ConnectionUri $server -Credential $Credential -SessionOption $skipCertificate -Name $Global:RemoteSessionName
	$Global:Session = $session
	$lyncCommands = "Get-CsUser", "Get-CsAdUser"
	Import-PSSession $Global:Session -CommandName $lyncCommands | Out-Null

	Write-Debug "Opened a new RPS Session."
}

Get-OpenImportConnectionResults

$exceptionRaisedOnErrorCheck = [Microsoft.MetadirectoryServices.ServerDownException]
Exit-Script -ScriptType "Begin-Import" -ExceptionRaisedOnErrorCheck $exceptionRaisedOnErrorCheck

</parameter><parameter name="Import Script" type="text" use="global">&lt;#
&lt;copyright file="ImportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Main Import script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenImportConnectionRunStep]
	$OpenImportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.GetImportEntriesRunStep]
	$GetImportEntriesRunStep,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Import"

function Import-CSEntries
{
	&lt;#
	.Synopsis
		Imports the users and OU's from the connected source.
	.Description
		Imports the users and OU's from the connected source.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.GetImportEntriesResults])]
	param (
	)
	
	$importEntriesResults = New-Object -TypeName "Microsoft.MetadirectoryServices.GetImportEntriesResults"
	$importEntriesResults.CSEntries = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.CSEntryChange

	foreach ($type in $schema.Types)
	{
		$objectType = $type.Name

		if ($customData.WaterMark.$objectType.MoreToImport -eq "1")
		{
			$lastRunDateTime = $null
			if ($deltaImport)
			{
				$lastRunDateTime = $customData.WaterMark.LastRunDateTime
			}

			$filterData = Get-PagingFilter -ObjectType $objectType -LastRunDateTime $lastRunDateTime

			Write-Debug ("Importing {0}. LdapFilter: {1}" -f $objectType, $filterData["LdapFilter"])

			switch ($objectType)
			{
				"User"
				{
					$importdata = Import-Users -LdapFilter $filterData["LdapFilter"]
					break
				}

				"OrganizationalUnit"
				{
					$importdata = Import-OrganizationalUnits -LdapFilter $filterData["LdapFilter"]
					break
				}

				default
				{
					throw "Unknown ObjectType: $_"
				}
			}
			
			$importEntriesResults.CSEntries.AddRange($importdata.CSEntries)

			if (!$filterData["MoreToImport"])
			{ 
				$customData.WaterMark.CurrentPageIndex = "0"
				$customData.WaterMark.$objectType.MoreToImport = "0"
			}
			else
			{
				$customData.WaterMark.CurrentPageIndex = [string]$filterData["NextPageIndex"]
			}

			Write-Debug ("Imported {0}. LdapFilter: {1} " -f $objectType, $filterData["LdapFilter"])

			break
		}
	}

	$importEntriesResults.MoreToImport = $false

	foreach ($type in $schema.Types)
	{
		$objectType = $type.Name

		if ($customData.WaterMark.$objectType.MoreToImport -eq "1")
		{
			$importEntriesResults.MoreToImport = $true
			break
		}
	}
	
	$importEntriesResults.CustomData = $customData.InnerXml

	Write-Debug ("WaterMark saved is: {0}" -f $importEntriesResults.CustomData)
	Write-Debug ("ImportEntriesResults.MoreToImport is: {0}" -f $importEntriesResults.MoreToImport)

	return $importEntriesResults
}

function Import-Users
{
	&lt;#
	.Synopsis
		Imports the users from the connected source.
	.Description
		Imports the users from the connected source.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.GetImportEntriesResults])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$LdapFilter
	)

	$importReturnInfo = New-Object -TypeName "Microsoft.MetadirectoryServices.GetImportEntriesResults"
	$importReturnInfo.MoreToImport = $false
	$importReturnInfo.CSEntries = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.CSEntryChange

	$cmd = "Get-CsUser -LdapFilter '$LdapFilter'"
	if (![string]::IsNullOrEmpty($preferredDomainController))
	{
		$cmd += " -DomainController '$preferredDomainController'"
	}

	$statusMsg = "Invoking $cmd"
	$activityName = $MyInvocation.InvocationName

	Write-Progress -Id 1 -Activity $activityName -Status $statusMsg

	$x = Invoke-Expression $cmd

	if ($x)
	{
		if ($x -is [array])
		{
			$importReturnInfo.CSEntries.Capacity = $x.Count
		}

		$currentParition = $openImportConnectionRunStep.StepPartition.DN

		foreach ($i in $x) 
		{
			if ($i.DistinguishedName.EndsWith($currentParition, "OrdinalIgnoreCase") -eq $false)
			{
				Write-Debug ("Identity {0} does not belong to the current partition {1}. Dropping it from import results..." -f $i.DistinguishedName, $currentParition)
				continue
			}
			 
			$csentry = New-CSEntryChange -InputObject $i -ObjectType "User" -Schema $schema
			[void] $importReturnInfo.CSEntries.Add($csentry)
		}
	}

	return $importReturnInfo
}

function Get-PagingFilter
{
	&lt;#
	.Synopsis
		Gets the paging filter for the specified object type.
	.Description
		Gets the paging filter for the specified object type.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([string])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$ObjectType,
		[parameter(Mandatory = $false)]
		[string]
		$LastRunDateTime
	)

	$filterData = @{}
		
	switch ($ObjectType)
	{
		"User"
		{
			$pageIndex = [int]$customData.WaterMark.CurrentPageIndex

			if ($pageIndex -ge $userPages.Length)
			{
				throw ("Unexpected Page Index $pageIndex to import objectType {0}. Max Index: {1}" -f $ObjectType, $userPages.Length)
			}

			$ldapFilter = "(&amp;(objectCategory=person)(objectClass=user)(msRTCSIP-PrimaryUserAddress=sip:{0}*)" -f $userPages[$pageIndex].Trim() # no spaces in the LDAP query or it will fail.

			if (![string]::IsNullOrEmpty($LastRunDateTime))
			{
				$ldapFilter += "(whenChanged&gt;={0:yyyyMMddHHmmss}.0Z)" -f ([DateTime]$LastRunDateTime).AddMinutes(-1*[int]$lastRunDateTimeOffset) # The LastRunDateTime in watermark is already in UTC.
			}

			$ldapFilter += ")"

			++$pageIndex
			$moreToImport = ($pageIndex -lt $userPages.Length)

			$filterData.Add("LdapFilter", $ldapFilter)
			$filterData.Add("NextPageIndex", $pageIndex)
			$filterData.Add("MoreToImport", $moreToImport)

			break
		}

		"OrganizationalUnit"
		{
			$pageIndex = [int]$customData.WaterMark.CurrentPageIndex

			if ($pageIndex -ge $ouPages.Length)
			{
				throw ("Unexpected Page Index $pageIndex to import objectType {0}. Max Index: {1}" -f $ObjectType, $ouPages.Length)
			}

			$ldapFilter = "(name={0}*)" -f $ouPages[$pageIndex].Trim()
			if (![string]::IsNullOrEmpty($LastRunDateTime))
			{
				$ldapFilter += "(whenChanged&gt;={0:yyyyMMddHHmmss}.0Z)" -f ([DateTime]$LastRunDateTime).AddMinutes(-1*[int]$lastRunDateTimeOffset) # The LastRunDateTime in watermark is already in UTC.
			}

			++$pageIndex
			$moreToImport = ($pageIndex -lt $ouPages.Length)

			$filterData.Add("LdapFilter", $ldapFilter)
			$filterData.Add("NextPageIndex", $pageIndex)
			$filterData.Add("MoreToImport", $moreToImport)

			break
		}

		default
		{
			throw "Unexpected ObjectType $_"
		}
	}

	return $filterData
}

function Import-OrganizationalUnits
{
	&lt;#
	.Synopsis
		Imports the OU's from the connected source.
	.Description
		Imports the OU's from the connected source.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([Microsoft.MetadirectoryServices.GetImportEntriesResults])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$LdapFilter
	)

	$importReturnInfo = New-Object -TypeName "Microsoft.MetadirectoryServices.GetImportEntriesResults"
	$importReturnInfo.MoreToImport = $false
	$importReturnInfo.CSEntries = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.CSEntryChange

	$statusMsg = "Importing OrganizationalUnits -LdapFilter $LdapFilter"
	$activityName = $MyInvocation.InvocationName

	Write-Progress -Id 1 -Activity $activityName -Status $statusMsg

	$x = Get-OrganizationalUnits -LdapFilter $LdapFilter

	if ($x)
	{
		if ($x -is [array])
		{
			$importReturnInfo.CSEntries.Capacity = $x.Count
		}

		foreach ($i in $x) 
		{ 
			$csentry = New-CSEntryChange -InputObject $i -ObjectType "OrganizationalUnit" -Schema $schema
			[void] $importReturnInfo.CSEntries.Add($csentry)
		}
	}

	return $importReturnInfo
}

function Get-OrganizationalUnits
{
	&lt;#
	.Synopsis
		Imports the OU's from the connected source.
	.Description
		Imports the OU's from the connected source.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([string[]])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$LdapFilter
	)

	$includedNodeOUs = @()

	foreach ($includedNode in $openImportConnectionRunStep.InclusionHierarchyNodes)
	{
		$rootDN = $includedNode.DN

		Write-Debug "Enumerating Inclusion OrganizationalUnit Hierarchy for $rootDN"

		$includedNodeOUs += Get-OrganizationalUnitHierarchy -RootDN $rootDN -LdapFilter $LdapFilter
	}

	$excludedNodeOUs = @()
	foreach ($exludedNode in $openImportConnectionRunStep.ExclusionHierarchyNodes)
	{
		$rootDN = $includedNode.DN

		Write-Debug "Enumerating Exclusion OrganizationalUnit Hierarchy for $rootDN"

		$excludedNodeOUs += Get-OrganizationalUnitHierarchy -RootDN $rootDN -LdapFilter $LdapFilter
	}

	$organizationalUnit = @()
	foreach ($includedNodeOU in $includedNodeOUs)
	{
		$exclude = $false
		# seems excludedNodeOUs can just be ignored. 
		##foreach ($excludedNodeOU in $excludedNodeOUs)
		##{
		##	if ($includedNodeOU.DistinguishedName -eq $excludedNodeOU.DistinguishedName)
		##	{
		##		$exclude = $true
		##		break
		##	}
		##}

		if (!$exclude)
		{
			$organizationalUnit += $includedNodeOU
		}
	}

	return $organizationalUnit
}

function Get-OrganizationalUnitHierarchy
{
	&lt;#
	.Synopsis
		Imports the specifed OU Hierarchy from the connected source.
	.Description
		Imports the specifed OU Hierarchy from the connected source.
	#&gt;
	
	[CmdletBinding()]
    [OutputType([string[]])]
	param (
		[parameter(Mandatory = $true)]
		[string]
		$RootDN,
		[parameter(Mandatory = $true)]
		[string]
		$LdapFilter
	)

	$attributeNameMapping = @{ Name = "name"; DistinguishedName = "distinguishedname"; ObjectClass = "objectclass";  ObjectCategory = "objectcategory"; Guid = "objectguid" }

	if ([string]::IsNullOrEmpty($preferredDomainController))
	{
		$searchPath = "LDAP://{0}" -f $RootDN
	}
	else
	{
		$searchPath = "LDAP://{0}/{1}" -f $preferredDomainController, $RootDN
	}

	Write-Debug ("Get-OrganizationalUnitHierarchy Search Path: {0}" -f $searchPath)

	$userName = "{0}\{1}" -f $Credential.GetNetworkCredential().Domain, $Credential.GetNetworkCredential().UserName
	$password = $Credential.GetNetworkCredential().Password
	$searchRoot = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $searchPath, $userName, $password
	$ds = [adsisearcher]"(&amp;(|(objectClass=organizationalUnit)(objectClass=Container))$LdapFilter)"
	$ds.searchroot = $searchRoot
	$ds.PageSize = 1000 
	$ds.SearchScope = "Subtree"
	$ds.PropertiesToLoad.AddRange($attributeNameMapping.Values)

	$results = $ds.FindAll()

	$organizationalUnits = @() 

	foreach ($result in $results)
	{
		$organizationalUnit = New-Object PSObject

		$props = $result.Properties

		foreach ($propName in $attributeNameMapping.Keys)
		{
			if (@($props.item($attributeNameMapping.$propName)).count -gt 1)
			{ 
				$values = [string[]]$props.item($attributeNameMapping.$propName)
				$organizationalUnit | Add-Member -MemberType NoteProperty -Name $propName -Value $values
			} 
			else
			{
				$organizationalUnit | Add-Member -MemberType NoteProperty -Name $propName -Value $props.item($attributeNameMapping.$propName)[0]
			} 
		}

		$organizationalUnits += $organizationalUnit 
	}

	return $organizationalUnits
}

$userPages = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "UserPages"

if ([string]::IsNullOrEmpty($userPages))
{
	$userPages = "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9".Split(",") 
} 
else
{
	$userPages = $userPages.Split(",")
}

$ouPages = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "OrganizationalUnitPages"
if ([string]::IsNullOrEmpty($ouPages))
{
	$ouPages = @("")
} 
else
{
	$ouPages = $ouPages.Split(",")
}

$lastRunDateTimeOffset = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "LastRunDateTimeOffsetMinutes" 

if ([string]::IsNullOrEmpty($lastRunDateTimeOffset))
{
	$lastRunDateTimeOffset = 30 # in minutes
}
else
{
	$lastRunDateTimeOffset.Trim()
}

$deltaImport = $openImportConnectionRunStep.ImportType -eq "Delta"
$customData = [xml]$getImportEntriesRunStep.CustomData

$preferredDomainController = $customData.WaterMark.PreferredDomainController

Write-Debug ("GetImportEntriesRunStep.CustomData received is: {0}" -f $customData.InnerXml)

Import-CSEntries

Exit-Script -ScriptType "Import"

</parameter><parameter name="End Import Script" type="text" use="global">&lt;#
&lt;copyright file="End-ImportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The End-Import script for the Skype 2015 / Lync 2010 / 2013 Connector.
	Closes the RPS session.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenImportConnectionRunStep]
	$OpenImportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.CloseImportConnectionRunStep]
	$CloseImportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "End-Import"

function Get-CloseImportConnectionResults
{
	&lt;#
	.Synopsis
		Gets the CloseImportConnectionResults.
	.Description
		Gets the CloseImportConnectionResults.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Microsoft.MetadirectoryServices.CloseImportConnectionResults])]
	param (
	)
	
	$waterMark = [xml]$CloseImportConnectionRunStep.CustomData

	if ($waterMark -ne $null -and $waterMark.WaterMark -ne $null)
	{
		$waterMark.WaterMark.LastRunDateTime = [DateTime]::UtcNow.ToString("yyyy-MM-dd HH:mm:ss");
	}

	Write-Debug ("Watermark finalized to: {0}" -f $waterMark.InnerXml)

	$results = New-Object Microsoft.MetadirectoryServices.CloseImportConnectionResults($watermark.InnerXml)

	return $results
}

Get-CloseImportConnectionResults

if (Test-Variable -Name "Session" -Scope "Global")
{
	Remove-PSSession $Global:Session
}

Exit-Script -ScriptType "End-Import"
</parameter><parameter name="Begin Export Script" type="text" use="global">&lt;#
&lt;copyright file="Begin-ExportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Begin-Export script for the Skype 2015 / Lync 2010 / 2013 Connector.
	Opens the RPS session and imports a set of Lync cmdlets into it.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenExportConnectionRunStep]
	$OpenExportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $ScriptDir -ChildPath $ConfigParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Begin-Export"

$server = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "Server"
$preferredDomainController = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "PreferredDomainControllerFQDN"

if (![string]::IsNullOrEmpty($preferredDomainController))
{
	$preferredDomainController = Select-PreferredDomainController -DomainControllerList $preferredDomainController
}

$Global:PreferredDomainController = $preferredDomainController

$session = Get-PSSession -Name $Global:RemoteSessionName -ErrorAction "SilentlyContinue"

if (!$session)
{
	Write-Debug "Opening a new RPS Session."

	$skipCertificate = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
	$session = New-PSSession -ConnectionUri $server -Credential $Credential -SessionOption $skipCertificate -Name $Global:RemoteSessionName
	$Global:Session = $session
	$lyncCommands = "Get-CsUser", "Get-CsAdUser", "Enable-CsUser", "Disable-CsUser", "Set-CsUser", "Grant-CsArchivingPolicy", "Grant-CsClientPolicy", `
		"Grant-CsClientVersionPolicy", "Grant-CsConferencingPolicy", "Grant-CsDialPlan", "Grant-CsExternalAccessPolicy", "Grant-CsHostedVoicemailPolicy", `
		"Grant-CsLocationPolicy", "Grant-CsPinPolicy", "Grant-CsPresencePolicy", "Grant-CsVoicePolicy", "Move-CsUser"

	Import-PSSession $Global:Session -CommandName $lyncCommands | Out-Null

	Write-Debug "Opened a new RPS Session."
}

$exceptionRaisedOnErrorCheck = [Microsoft.MetadirectoryServices.ServerDownException]
Exit-Script -ScriptType "Begin-Export" -ExceptionRaisedOnErrorCheck $exceptionRaisedOnErrorCheck
</parameter><parameter name="Export Script" type="text" use="global">&lt;#
&lt;copyright file="ExportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The Main Export script for the Skype 2015 / Lync 2010 / 2013 Connector.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenExportConnectionRunStep]
	$OpenExportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[System.Collections.Generic.IList[Microsoft.MetadirectoryServices.CSEntryChange]]
	$CSEntries,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $scriptDir -ChildPath $configParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "Export"

function Export-CSEntries
{
	&lt;#
	.Synopsis
		Exports the CSEntry changes.
	.Description
		Exports the CSEntry changes.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([System.Collections.Generic.List[Microsoft.MetadirectoryServices.CSEntryChangeResult]])]
	param (
	)

	$csentryChangeResults = New-GenericObject System.Collections.Generic.List Microsoft.MetadirectoryServices.CSEntryChangeResult

	foreach ($csentryChange in $CSEntries)
	{
		$Global:CmdStatus = $null
		$newAnchorTable = @{}

		$dn = Get-CSEntryChangeDN $csentryChange
		$objectType = $csentryChange.ObjectType
		$objectModificationType = $csentryChange.ObjectModificationType

		Write-Debug "Exporting $objectModificationType to $objectType : $dn"

		try
		{
			switch ($objectType)
			{
				"User"
				{
					$newAnchorTable = Export-User $csentryChange
					break
				}

				"OrganizationalUnit"
				{
					$newAnchorTable = Export-OrganizationalUnit $csentryChange
					break
				}

				default
				{
					throw "Unknown CSEntry ObjectType: $_"
				}
			}
		}
		catch
		{
			$Global:CmdStatus = "$_"
		}

		if (Test-Variable "CmdStatus" "Global")
		{
			$csentryChangeResult = New-CSEntryChangeExportError -CSEntryChangeIdentifier $csentryChange.Identifier -ErrorObject $Global:CmdStatus
		}
		else
		{
			$exportAdd = $objectModificationType -eq "Add"

			$csentryChangeResult = New-CSEntryChangeResult -CSEntryChangeIdentifier $csentryChange.Identifier -NewAnchorTable $newAnchorTable -ExportAdd:$exportAdd

			Write-Debug "Exported $objectModificationType to $objectType : $dn."
		}

		$csentryChangeResults.Add($csentryChangeResult)
	}

	##$exportEntriesResults = New-Object -TypeName "Microsoft.MetadirectoryServices.PutExportEntriesResults" -ArgumentList $csentryChangeResults
	$closedType = [Type] "Microsoft.MetadirectoryServices.PutExportEntriesResults"
	return [Activator]::CreateInstance($closedType, $csentryChangeResults)
}

function Export-User
{
	&lt;#
	.Synopsis
		Exports the changes for User objects.
	.Description
		Exports the changes for User objects.
		Returns the Hashtable of anchor attribute values for Export-Add csentries.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Hashtable])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	$newAnchorTable = @{}

	switch ($CSEntryChange.ObjectModificationType)
	{
		"Add"
		{
			$dn  = Get-CSEntryChangeDN $CSEntryChange
			$identity = Get-CsIdentity $CSEntryChange

			$cmd = "Get-CsAdUser -Identity '$identity'"
			if (![string]::IsNullOrEmpty($preferredDomainController))
			{
				$cmd += " -DomainController '$preferredDomainController'"
			}

			$cmd += " -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"

			Write-Debug "Invoking $cmd for user: $dn"

			$x = Invoke-Expression $cmd 

			if (!$Global:CmdStatus)
			{
				$newAnchorTable.Add("Guid", $x.Guid.ToByteArray())
			}

			Invoke-EnableCsUserCommand $CSEntryChange 
			Invoke-SetCsUserCommand $CSEntryChange
			Invoke-GrantCsPolicyCommands $CSEntryChange

			break
		}

		"Replace"
		{
			Invoke-MoveCsUserCommand $CSEntryChange
			Invoke-SetCsUserCommand $CSEntryChange
			Invoke-GrantCsPolicyCommands $CSEntryChange

			break
		}

		"Update"
		{
			Invoke-MoveCsUserCommand $CSEntryChange
			Invoke-SetCsUserCommand $CSEntryChange
			Invoke-GrantCsPolicyCommands $CSEntryChange

			break
		}

		"Delete"
		{
			Invoke-DisableCsUserCommand $CSEntryChange

			break
		}

		default
		{
			throw "Unknown CSEntry ObjectModificationType: $_"
		}
	}

	return $newAnchorTable
}

function Export-OrganizationalUnit
{
	&lt;#
	.Synopsis
		Exports the changes for OrganizationalUnit objects.
	.Description
		Exports the changes for OrganizationalUnit objects.
		Returns the Hashtable of anchor attribute values for Export-Add csentries.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([Hashtable])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	$newAnchorTable = @{}

	switch ($CSEntryChange.ObjectModificationType)
	{
		"Add"
		{
			$dn  = Get-CSEntryChangeDN $CSEntryChange

			if ([string]::IsNullOrEmpty($preferredDomainController))
			{
				$adsPath = "LDAP://{0}" -f $dn
			}
			else
			{
				$adsPath = "LDAP://{0}/{1}" -f $preferredDomainController, $dn
			}

			Write-Debug ("Export-OrganizationalUnit ADS Path: {0}" -f $adsPath)

			$userName = "{0}\{1}" -f $Credential.GetNetworkCredential().Domain, $Credential.GetNetworkCredential().UserName
			$password = $Credential.GetNetworkCredential().Password
			$directoryEntry = New-Object System.DirectoryServices.DirectoryEntry -ArgumentList $adsPath, $userName, $password
			
			$objectGuid = $directoryEntry.ObjectGUID | foreach { "{0:X2}" -f $_}
			$objectGuid = [Guid] $objectGuid.Replace(" ", "")

			$newAnchorTable.Add("Guid", $objectGuid.ToByteArray())

			break
		}

		"Replace"
		{
			break
		}

		"Update"
		{
			break
		}

		"Delete"
		{
			break
		}

		default
		{
			Write-Error "Unknown CSEntry ObjectModificationType: $_"
		}
	}

	return $newAnchorTable
}

function Invoke-EnableCsUserCommand
{
	&lt;#
	.Synopsis
		Invokes Enable-CsUser cmdlet on the specified user csentry.
	.Description
		Invokes Enable-CsUser cmdlet on the specified user csentry.
	#&gt;
	
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange
		$identity = Get-CsIdentity $CSEntryChange
		$registrarPool = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "RegistrarPool"
		$cmd = "Enable-CsUser -Identity '$identity' -RegistrarPool '$registrarPool'"
		if (![string]::IsNullOrEmpty($preferredDomainController))
		{
			$cmd += " -DomainController '$preferredDomainController'"
		}

		$sipAddress = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "SipAddress"

		if (![string]::IsNullOrEmpty($sipAddress))
		{
			$cmd += " -SipAddress '$sipAddress'"
		}
		elseif ($sipAddressType -eq "FirstLastName" -or $sipAddressType -eq "SamAccountName")
		{
			$cmd +=  " -SipAddressType '$sipAddressType' -SipDomain '$sipDomain'"
		}
		else
		{
			$cmd +=  " -SipAddressType '$sipAddressType'"
		}

		$cmd += " -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"

		Write-Debug "Invoking $cmd for user: $dn"

		Invoke-Expression $cmd | Out-Null
	}
}

function Invoke-SetCsUserCommand
{
	&lt;#
	.Synopsis
		Invokes Set-CsUser cmdlet on the specified user csentry.
	.Description
		Invokes Set-CsUser cmdlet on the specified user csentry.
	#&gt;
	
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange
		$identity = Get-CsIdentity $CSEntryChange
		$audioVideoDisabled = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "AudioVideoDisabled"
		$enabled = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "Enabled"
		$enterpriseVoiceEnabled = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "EnterpriseVoiceEnabled"
		$hostedVoiceMail = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "HostedVoiceMail"
		$lineURI = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "LineURI"
		$lineServerURI = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "LineServerURI"
		$privateLine = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "PrivateLine"
		$remoteCallControlTelephonyEnabled = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "RemoteCallControlTelephonyEnabled"
		$sipAddress = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "SipAddress"

		$cmd = "Set-CsUser -Identity '$identity'"
		if (![string]::IsNullOrEmpty($preferredDomainController))
		{
			$cmd += " -DomainController '$preferredDomainController'"
		}

		if ($audioVideoDisabled -ne $null) { $cmd += " -AudioVideoDisabled `$$audioVideoDisabled" }
		if ($enabled -ne $null) { $cmd += " -Enabled `$$enabled" }
		if ($enterpriseVoiceEnabled -ne $null) { $cmd += " -EnterpriseVoiceEnabled `$$enterpriseVoiceEnabled" }
		if ($hostedVoiceMail -ne $null) { $cmd += " -HostedVoiceMail `$$hostedVoiceMail" }
		if ($lineURI -ne $null) { $cmd += " -LineURI '$lineURI'" }
		if ($lineServerURI -ne $null) { $cmd += " -LineServerURI '$lineServerURI'" }
		if ($privateLine -ne $null) { $cmd += " -PrivateLine '$privateLine'" }
		if ($remoteCallControlTelephonyEnabled -ne $null) { $cmd += " -RemoteCallControlTelephonyEnabled `$$remoteCallControlTelephonyEnabled" }
		if ($sipAddress -ne $null) { $cmd += " -SipAddress '$sipAddress'" }

		$cmd += " -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"

		Write-Debug "Invoking $cmd for user: $dn"

		Invoke-Expression $cmd | Out-Null
	}
}

function Invoke-GrantCsPolicyCommands
{
	&lt;#
	.Synopsis
		Invokes Grant-CsPolicy cmdlets on the specified user csentry.
	.Description
		Invokes Grant-CsPolicy cmdlets on the specified user csentry.
	#&gt;
	
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)


	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange
		$identity = Get-CsIdentity $CSEntryChange
		$archivingPolicy  = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "ArchivingPolicy"
		$archivingPolicyChanged  = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "ArchivingPolicy"
		$clientPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "ClientPolicy"
		$clientPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "ClientPolicy"
		$clientVersionPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "ClientVersionPolicy"
		$clientVersionPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "ClientVersionPolicy"
		$conferencingPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "ConferencingPolicy"
		$conferencingPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "ConferencingPolicy"
		$dialPlan = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "DialPlan"
		$dialPlanChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "DialPlan"
		$externalAccessPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "ExternalAccessPolicy"
		$externalAccessPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "ExternalAccessPolicy"
		$hostedVoicemailPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "HostedVoicemailPolicy"
		$hostedVoicemailPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "HostedVoicemailPolicy"
		$locationPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "LocationPolicy"
		$locationPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "LocationPolicy"
		$pinPolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "PinPolicy"
		$pinPolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "PinPolicy"
		$presencePolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "PresencePolicy"
		$presencePolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "PresencePolicy"
		$voicePolicy = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "VoicePolicy"
		$voicePolicyChanged = Test-CSEntryChangeValueChanged -CSEntryChange $CSEntryChange -AttributeName "VoicePolicy"

		$cmd = "Get-CsUser -Identity '$identity'"
		if (![string]::IsNullOrEmpty($preferredDomainController))
		{
			$cmd += " -DomainController '$preferredDomainController'"
		}

		if ($archivingPolicyChanged) { $cmd += " | Grant-CsArchivingPolicy -PolicyName '$archivingPolicy' -PassThru" }
		if ($clientPolicyChanged) { $cmd += " | Grant-CsClientPolicy -PolicyName '$clientPolicy' -PassThru" }
		if ($clientVersionPolicyChanged) { $cmd += " | Grant-CsClientVersionPolicy -PolicyName '$clientVersionPolicy' -PassThru" }
		if ($conferencingPolicyChanged) { $cmd += " | Grant-CsConferencingPolicy -PolicyName '$conferencingPolicy' -PassThru" }
		if ($dialPlanChanged) { $cmd += " | Grant-CsDialPlan -PolicyName '$dialPlan' -PassThru" }
		if ($externalAccessPolicyChanged) { $cmd += " | Grant-CsExternalAccessPolicy -PolicyName '$externalAccessPolicy' -PassThru" }
		if ($hostedVoicemailPolicyChanged) { $cmd += " | Grant-CsHostedVoicemailPolicy -PolicyName '$hostedVoicemailPolicy' -PassThru" }
		if ($locationPolicyChanged) { $cmd += " | Grant-CsLocationPolicy -PolicyName '$locationPolicy' -PassThru" }
		if ($pinPolicyChanged) { $cmd += " | Grant-CsPinPolicy -PolicyName '$pinPolicy' -PassThru" }
		if ($presencePolicyChanged) { $cmd += " | Grant-CsPresencePolicy -PolicyName '$presencePolicy' -PassThru" }
		if ($voicePolicyChanged) { $cmd += " | Grant-CsVoicePolicy -PolicyName '$voicePolicy' -PassThru" }

		$cmd += " -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"

		Write-Debug "Invoking $cmd for user: $dn"

		Invoke-Expression $cmd | Out-Null
	}
}

function Invoke-MoveCsUserCommand
{
	&lt;#
	.Synopsis
		Invokes Move-CsUser cmdlet on the specified user csentry.
	.Description
		Invokes Move-CsUser cmdlet on the specified user csentry.
	#&gt;
	
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange
		$identity = Get-CsIdentity $CSEntryChange
		$registrarPool  = Get-CSEntryChangeValue -CSEntryChange $CSEntryChange -AttributeName "RegistrarPool"
		if ($registrarPool)
		{
			$cmd = "Move-CsUser -Identity '$identity' -Target $registrarPool -Force:`$$forceMove -Confirm:`$$false -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"
			if (![string]::IsNullOrEmpty($preferredDomainController))
			{
				$cmd += " -DomainController '$preferredDomainController'"
			}

			Write-Debug "Invoking $cmd for user: $dn"

			Invoke-Expression $cmd | Out-Null
		}
	}
}

function Invoke-DisableCsUserCommand
{
	&lt;#
	.Synopsis
		Invokes Disable-CsUser cmdlet on the specified user csentry.
	.Description
		Invokes Disable-CsUser cmdlet on the specified user csentry.
	#&gt;
	
	[CmdletBinding()]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange
		$identity = Get-CsIdentity $CSEntryChange

		$cmd = "Disable-CsUser -Identity '$identity'"
		if (![string]::IsNullOrEmpty($preferredDomainController))
		{
			$cmd += " -DomainController '$preferredDomainController'"
		}

		$cmd += " -ErrorVariable 'Global:CmdStatus' -ErrorAction 'SilentlyContinue'"

		Write-Debug "Invoking $cmd for user: $dn"

		Invoke-Expression $cmd | Out-Null
		
		# quick and dirty check for object deletion in AD. will probably need localisation.
		# we could query AD as well, but that will again work only with PreferredDomainController setting in a multi-domain setup since we want to use objectGUID and not DN to bind.
		if ($Global:CmdStatus)
		{
			foreach ($cmdStatus in $Global:CmdStatus)
			{
				$exceptionMessage = $cmdStatus.ToString()
				if ($exceptionMessage.Contains("Management object not found for identity"))
				{
					Write-Warning ("CSEntry Identifier: {0}. Error: {1}" -f $CSEntryChange.Identifier, $exceptionMessage)

					$Global:CmdStatus = $null # ignore the error if the object is already deleted from AD.
				}

				break # process the first error and stop
			}
		}
	}
}

function Get-CsIdentity
{
	&lt;#
	.Synopsis
		Gets the identifier for specified user csentry.
	.Description
		Gets the identifier for specified user csentry.
		It is the Guid if the Anchor is populated. Otherwise DN.
	#&gt;
	
	[CmdletBinding()]
	[OutputType([string])]
	param (
		[parameter(Mandatory = $true)]
		[Microsoft.MetadirectoryServices.CSEntryChange]
		$CSEntryChange
	)

	if (!$Global:CmdStatus)
	{
		$dn  = Get-CSEntryChangeDN $CSEntryChange

		if ($CSEntryChange.AnchorAttributes.Contains("Guid") -and $CSEntryChange.AnchorAttributes["Guid"].Value -ne $null)
		{
			return ([Guid]$CSEntryChange.AnchorAttributes["Guid"].Value).ToString()
		}
		else # should only be here when ObjectModificationType = "Add"
		{
			return $dn
		}
	}
}

$sipAddressType = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "SipAddressType"
$sipDomain = Get-ConfigParameter -ConfigParameters $ConfigParameters -ParameterName "SipDomain"

if ($sipAddressType -eq "FirstLastName" -or $sipAddressType -eq "SamAccountName")
{
	if ([string]::IsNullOrEmpty($sipDomain))
	{
		throw "MA configuration error. When SipAddressType = $sipAddressType, SipDomain must be configured as well."
	}
}

$preferredDomainController = $Global:PreferredDomainController

$forceMove = (Get-ConfigParameter -ConfigParameters $configParameters -ParameterName "ForceMove") -eq "Yes"

Export-CSEntries

Exit-Script -ScriptType "Export" -SuppressErrorCheck

</parameter><parameter name="End Export Script" type="text" use="global">&lt;#
&lt;copyright file="End-ExportScript-Lync.ps1" company="Microsoft"&gt;
	Copyright (c) Microsoft. All Rights Reserved.
	Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
&lt;/copyright&gt;
&lt;summary&gt;
	The End-Export script for the Skype 2015 / Lync 2010 / 2013 Connector.
	Closes the RPS session.
&lt;/summary&gt;
#&gt;

[CmdletBinding()]
param (
	[parameter(Mandatory = $true)]
	[System.Collections.ObjectModel.KeyedCollection[string,Microsoft.MetadirectoryServices.ConfigParameter]]
	$ConfigParameters,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.Schema]
	$Schema,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.OpenExportConnectionRunStep]
	$OpenExportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Microsoft.MetadirectoryServices.CloseExportConnectionRunStep]
	$CloseExportConnectionRunStep,
	[parameter(Mandatory = $true)]
	[Alias('PSCredential')] # To fix mess-up of the parameter name in the RTM version of the PowerShell connector.
	[System.Management.Automation.PSCredential]
	$Credential,
	[parameter(Mandatory = $false)]
	[ValidateScript({ Test-Path $_ -PathType "Container" })]
	[string]
	$ScriptDir = [Microsoft.MetadirectoryServices.MAUtils]::MAFolder # Optional parameter for manipulation by the TestHarness script.
)

Set-StrictMode -Version "2.0"

$commonModule = (Join-Path -Path $scriptDir -ChildPath $configParameters["Common Module Script Name (with extension)"].Value)

if (!(Get-Module -Name (Get-Item $commonModule).BaseName)) { Import-Module -Name $commonModule }

Enter-Script -ScriptType "End-Export"

if (Test-Variable -Name "Session" -Scope "Global")
{
	Remove-PSSession $Global:Session
}

Exit-Script -ScriptType "End-Export"
</parameter><parameter name="Begin Password Script" type="text" use="global"></parameter><parameter name="Password Extension Script" type="text" use="global"></parameter><parameter name="End Password Script" type="text" use="global"></parameter><parameter name="SipAddressType_Global" type="string" use="global">UserPrincipalName</parameter><parameter name="SipDomain_Global" type="string" use="global"></parameter><parameter name="ForceMove_Global" type="string" use="global">Yes</parameter><parameter name="UserPages_Global" type="string" use="global">a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9</parameter><parameter name="OrganizationalUnitPages_Global" type="string" use="global"></parameter><parameter name="PreferredDomainControllerFQDN_Global" type="string" use="global">contoso-dc01,contoso-dc02</parameter><parameter name="LastRunDateTimeOffsetMinute_Global" type="string" use="global">30</parameter></parameter-values><case_normalize_dn_for_anchor>1</case_normalize_dn_for_anchor><possible_component_mappings><mapping><dn_component>Ou</dn_component><object_class>OrganizationalUnit</object_class></mapping></possible_component_mappings><default_visible_attributes><attribute>Guid</attribute><attribute>Name</attribute><attribute>ObjectClass</attribute><attribute>ObjectCategory</attribute><attribute>ArchivingPolicy</attribute><attribute>AudioVideoDisabled</attribute><attribute>ClientPolicy</attribute><attribute>ClientVersionPolicy</attribute><attribute>ConferencingPolicy</attribute><attribute>DialPlan</attribute><attribute>DisplayName</attribute><attribute>Enabled</attribute><attribute>EnabledForFederation</attribute><attribute>EnabledForInternetAccess</attribute><attribute>EnabledForRichPresence</attribute><attribute>EnterpriseVoiceEnabled</attribute><attribute>ExternalAccessPolicy</attribute><attribute>FirstName</attribute><attribute>HomeServer</attribute><attribute>HostedVoiceMail</attribute><attribute>HostedVoicemailPolicy</attribute><attribute>HostingProvider</attribute><attribute>Identity</attribute><attribute>IPPBXSoftPhoneRoutingEnabled</attribute><attribute>IsValid</attribute><attribute>LastName</attribute><attribute>LineServerURI</attribute><attribute>LineURI</attribute><attribute>LocationPolicy</attribute><attribute>OriginatorSid</attribute><attribute>PinPolicy</attribute><attribute>PresencePolicy</attribute><attribute>PrivateLine</attribute><attribute>ProxyAddresses</attribute><attribute>PublicNetworkEnabled</attribute><attribute>RegistrarPool</attribute><attribute>RemoteCallControlTelephonyEnabled</attribute><attribute>SamAccountName</attribute><attribute>Sid</attribute><attribute>SipAddress</attribute><attribute>TargetRegistrarPool</attribute><attribute>TargetServerIfMoving</attribute><attribute>TenantId</attribute><attribute>UserPrincipalName</attribute><attribute>VoicePolicy</attribute></default_visible_attributes></MAConfig>
 </private-configuration>
 <SyncConfig-refresh-schema>0</SyncConfig-refresh-schema>
 <ma-partition-data>
 <partition>
  <id>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</id>
  <name>DC=contoso,DC=com</name>
  <creation-time>2016-02-06 19:45:38.067</creation-time>
  <last-modification-time>2016-02-14 18:01:16.187</last-modification-time>
  <version>58</version>
  <selected>1</selected>
  <filter>
   <object-classes>
    <object-class>OrganizationalUnit</object-class>
    <object-class>User</object-class>
   </object-classes>
   <containers>
    <exclusions>
     <exclusion>DC=contoso,DC=com</exclusion>
    </exclusions>
    <inclusions>
     <inclusion>OU=HQ,DC=contoso,DC=com</inclusion>
     <inclusion>OU=NILONLINE,DC=contoso,DC=com</inclusion>
    </inclusions>
   </containers>
  </filter>
  <custom-data>
   <ecma-partition-data><dn>DC=contoso,DC=com</dn><name>DC=contoso,DC=com</name><is-domain>1</is-domain></ecma-partition-data><water-mark>PABXAGEAdABlAHIATQBhAHIAawA+ADwAQwB1AHIAcgBlAG4AdABQAGEAZwBlAEkAbgBkAGUAeAA+ADAAPAAvAEMAdQByAHIAZQBuAHQAUABhAGcAZQBJAG4AZABlAHgAPgA8AE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAGEAbABVAG4AaQB0AD4APABNAG8AcgBlAFQAbwBJAG0AcABvAHIAdAA+ADAAPAAvAE0AbwByAGUAVABvAEkAbQBwAG8AcgB0AD4APAAvAE8AcgBnAGEAbgBpAHoAYQB0AGkAbwBuAGEAbABVAG4AaQB0AD4APABVAHMAZQByAD4APABNAG8AcgBlAFQAbwBJAG0AcABvAHIAdAA+ADAAPAAvAE0AbwByAGUAVABvAEkAbQBwAG8AcgB0AD4APAAvAFUAcwBlAHIAPgA8AFAAcgBlAGYAZQByAHIAZQBkAEQAbwBtAGEAaQBuAEMAbwBuAHQAcgBvAGwAbABlAHIAPgBjAG8AbgB0AG8AcwBvAC0AZABjADAAMQA8AC8AUAByAGUAZgBlAHIAcgBlAGQARABvAG0AYQBpAG4AQwBvAG4AdAByAG8AbABsAGUAcgA+ADwATABhAHMAdABSAHUAbgBEAGEAdABlAFQAaQBtAGUAPgAyADAAMQA2AC0AMAAyAC0AMQA0ACAAMQA4ADoAMAAxADoAMQA1ADwALwBMAGEAcwB0AFIAdQBuAEQAYQB0AGUAVABpAG0AZQA+ADwALwBXAGEAdABlAHIATQBhAHIAawA+AAAA</water-mark>
  </custom-data>
  <allowed-operations>29</allowed-operations>
  <current>
   <batch-number>15</batch-number>
   <sequence-number>361</sequence-number>
  </current>
  <last-successful-batch>14</last-successful-batch>
  <filter-hints>
   <object-classes>
    <object-class>
     <name>OrganizationalUnit</name>
     <hierarchy>
      <object-class>OrganizationalUnit</object-class>
     </hierarchy>
     <included>1</included>
    </object-class>
    <object-class>
     <name>User</name>
     <hierarchy>
      <object-class>User</object-class>
     </hierarchy>
     <included>1</included>
    </object-class>
   </object-classes>
  </filter-hints>
 </partition>
</ma-partition-data>

 <ma-run-data>
 <run-configuration>
  <id>{1D8617CF-C0C1-46D4-A100-145275B86D16}</id>
  <name>Full Import</name>
  <creation-time>2016-02-06 20:17:41.960</creation-time>
  <version>5</version>
  <last-modification-time>2016-02-09 15:58:23.880</last-modification-time>
  <configuration><step><step-type type="full-import"><import-subtype>to-cs</import-subtype></step-type><threshold><batch-size>9999</batch-size></threshold><partition>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</partition><custom-data><extensible2-step-data><timeout>0</timeout><batch-size>9999</batch-size></extensible2-step-data><parameter-values><parameter name="SipAddressType_RunStep" type="string" use="run-step"></parameter><parameter name="SipDomain_RunStep" type="string" use="run-step"></parameter><parameter name="ForceMove_RunStep" type="string" use="run-step"></parameter><parameter name="UserPages_RunStep" type="string" use="run-step"></parameter><parameter name="OrganizationalUnitPages_RunStep" type="string" use="run-step"></parameter><parameter name="PreferredDomainControllerFQDN_RunStep" type="string" use="run-step"></parameter><parameter name="LastRunDateTimeOffsetMinute_RunStep" type="string" use="run-step"></parameter></parameter-values></custom-data></step></configuration>
 </run-configuration>
 <run-configuration>
  <id>{6B3F3A8F-4B1E-4714-BB60-A7607418E183}</id>
  <name>Export</name>
  <creation-time>2016-02-07 16:56:22.673</creation-time>
  <version>5</version>
  <last-modification-time>2016-02-14 09:59:14.163</last-modification-time>
  <configuration><step><step-type type="export"></step-type><threshold><batch-size>9999</batch-size></threshold><partition>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</partition><custom-data><extensible2-step-data><timeout>0</timeout><batch-size>9999</batch-size></extensible2-step-data><parameter-values><parameter name="SipAddressType_RunStep" type="string" use="run-step"></parameter><parameter name="SipDomain_RunStep" type="string" use="run-step"></parameter><parameter name="ForceMove_RunStep" type="string" use="run-step"></parameter><parameter name="UserPages_RunStep" type="string" use="run-step"></parameter><parameter name="OrganizationalUnitPages_RunStep" type="string" use="run-step"></parameter><parameter name="PreferredDomainControllerFQDN_RunStep" type="string" use="run-step"></parameter><parameter name="LastRunDateTimeOffsetMinute_RunStep" type="string" use="run-step"></parameter></parameter-values></custom-data></step></configuration>
 </run-configuration>
 <run-configuration>
  <id>{77B9B749-27CE-4AB5-B8A8-408F343EA17B}</id>
  <name>Delta Synchronization</name>
  <creation-time>2016-02-14 09:58:43.797</creation-time>
  <version>1</version>
  <last-modification-time>2016-02-14 09:58:43.797</last-modification-time>
  <configuration><step><step-type type="apply-rules"><apply-rules-subtype>apply-pending</apply-rules-subtype></step-type><threshold><batch-size>1</batch-size></threshold><partition>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</partition><custom-data><extensible2-step-data><batch-size>0</batch-size></extensible2-step-data><parameter-values><parameter name="SipAddressType_RunStep" type="string" use="run-step"></parameter><parameter name="SipDomain_RunStep" type="string" use="run-step"></parameter><parameter name="ForceMove_RunStep" type="string" use="run-step"></parameter><parameter name="UserPages_RunStep" type="string" use="run-step"></parameter><parameter name="OrganizationalUnitPages_RunStep" type="string" use="run-step"></parameter><parameter name="PreferredDomainControllerFQDN_RunStep" type="string" use="run-step"></parameter><parameter name="LastRunDateTimeOffsetMinute_RunStep" type="string" use="run-step"></parameter></parameter-values></custom-data></step></configuration>
 </run-configuration>
 <run-configuration>
  <id>{AA07FD46-B810-4C2A-AF51-DC38B61EE609}</id>
  <name>Delta Import</name>
  <creation-time>2016-02-06 20:17:41.960</creation-time>
  <version>1</version>
  <last-modification-time>2016-02-06 20:17:41.960</last-modification-time>
  <configuration><step><step-type type="delta-import"><import-subtype>to-cs</import-subtype></step-type><threshold><batch-size>9999</batch-size></threshold><partition>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</partition><custom-data><extensible2-step-data><timeout>0</timeout><batch-size>9999</batch-size></extensible2-step-data><parameter-values><parameter name="SipAddressType_RunStep" type="string" use="run-step"></parameter><parameter name="SipDomain_RunStep" type="string" use="run-step"></parameter><parameter name="ForceMove_RunStep" type="string" use="run-step"></parameter><parameter name="UserPages_RunStep" type="string" use="run-step"></parameter><parameter name="OrganizationalUnitPages_RunStep" type="string" use="run-step"></parameter><parameter name="PreferredDomainControllerFQDN_RunStep" type="string" use="run-step"></parameter><parameter name="LastRunDateTimeOffsetMinute_RunStep" type="string" use="run-step"></parameter></parameter-values></custom-data></step></configuration>
 </run-configuration>
 <run-configuration>
  <id>{AE0C488B-3EC1-4689-9D3F-6CA543C98A56}</id>
  <name>Full Synchronisation</name>
  <creation-time>2016-02-07 16:56:22.673</creation-time>
  <version>1</version>
  <last-modification-time>2016-02-07 16:56:22.673</last-modification-time>
  <configuration><step><step-type type="apply-rules"><apply-rules-subtype>reevaluate-flow-connectors</apply-rules-subtype></step-type><threshold><batch-size>1</batch-size></threshold><partition>{5C72BB16-AFE7-4553-A301-74F0E796FA1A}</partition><custom-data><extensible2-step-data><batch-size>0</batch-size></extensible2-step-data><parameter-values><parameter name="SipAddressType_RunStep" type="string" use="run-step"></parameter><parameter name="SipDomain_RunStep" type="string" use="run-step"></parameter><parameter name="ForceMove_RunStep" type="string" use="run-step"></parameter><parameter name="UserPages_RunStep" type="string" use="run-step"></parameter><parameter name="OrganizationalUnitPages_RunStep" type="string" use="run-step"></parameter><parameter name="PreferredDomainControllerFQDN_RunStep" type="string" use="run-step"></parameter><parameter name="LastRunDateTimeOffsetMinute_RunStep" type="string" use="run-step"></parameter></parameter-values></custom-data></step></configuration>
 </run-configuration>
</ma-run-data>

 <capabilities-mask>a4079671</capabilities-mask>
 <export-type>1</export-type>
 <dn-construction/>
 <password-sync><maximum-retry-count>10</maximum-retry-count><retry-interval>60</retry-interval><allow-low-security>0</allow-low-security></password-sync>
 <component_mappings><mapping><dn_component>Ou</dn_component><object_class>OrganizationalUnit</object_class></mapping></component_mappings>
</ma-data>

<mv-data>
 <import-attribute-flow>
  <import-flow-set mv-object-type="person">
   <import-flows mv-attribute="xActiveDirectoryDN" type="ranked">
    <import-flow src-ma="{44ADA013-1FDE-43D3-97DC-6AD0BB106409}" cd-object-type="user" id="{F9C75362-6DEF-4D5D-A820-BE01013D6B70}">
     <sync-rule-mapping mapping-type="direct" sync-rule-id="{D6883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{B450FD1D-A7B1-4CDD-A67F-0C0EDAB3A5F3}" initial-flow-only="false" is-existence-test="false">
      <src-attribute intrinsic="true">dn</src-attribute>
     </sync-rule-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="csObjectID" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{31676D61-D7C4-4F99-BA41-AD67B6376B16}">
     <direct-mapping>
      <src-attribute intrinsic="true">dn</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="expectedRulesList" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{D4A67699-64D9-4715-A5B6-83F503A667B9}">
     <direct-mapping>
      <src-attribute>ExpectedRulesList</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="accountName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{13539F96-195C-4199-8A8F-99FEFDDF5119}">
     <direct-mapping>
      <src-attribute>AccountName</src-attribute>
     </direct-mapping>
    </import-flow>
    <import-flow src-ma="{44ADA013-1FDE-43D3-97DC-6AD0BB106409}" cd-object-type="user" id="{2BA28F87-2FBB-4A3D-B6E4-61347613C2CC}">
     <sync-rule-mapping mapping-type="direct" sync-rule-id="{D6883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{4DCDFA68-F7FA-4B8F-88AD-BA88BB52E881}" initial-flow-only="false" is-existence-test="false">
      <src-attribute>sAMAccountName</src-attribute>
     </sync-rule-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="address" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{2D39189F-6C43-43E8-9426-6AE386E875FF}">
     <direct-mapping>
      <src-attribute>Address</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="city" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{A1AA4B0B-2499-4252-87F5-5C1A790FA93E}">
     <direct-mapping>
      <src-attribute>City</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="company" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{1F17403F-DD92-4723-ABCD-3A17E96E82FA}">
     <direct-mapping>
      <src-attribute>Company</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="country" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{31D2DE71-81A0-4FFF-BF27-BEEF738DE8EC}">
     <direct-mapping>
      <src-attribute>Country</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="department" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{64F7EF76-E6B4-40BD-805C-5CBEA0681763}">
     <direct-mapping>
      <src-attribute>Department</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="description" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{B4994CD3-2F9F-4231-948D-548D68941872}">
     <direct-mapping>
      <src-attribute>Description</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="displayName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{D9D72B7B-D3FB-49DF-89B2-AA7B6C4DBF78}">
     <direct-mapping>
      <src-attribute>DisplayName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="email" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{38BEE018-2759-437B-B5C8-23D59A2E85DA}">
     <direct-mapping>
      <src-attribute>Email</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="employeeID" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{D7763D23-84DB-40F2-A9C0-C11038B43119}">
     <direct-mapping>
      <src-attribute>EmployeeID</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="employeeEndDate" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{620F2FF3-1AA6-4C6E-820D-11AF2B91977B}">
     <direct-mapping>
      <src-attribute>EmployeeEndDate</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="employeeStartDate" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{B8C465B2-4E37-4EAD-B8D9-46CAE9BB7579}">
     <direct-mapping>
      <src-attribute>EmployeeStartDate</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="employeeType" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{50DF5836-B2C0-4F13-AB11-0B32424A478F}">
     <direct-mapping>
      <src-attribute>EmployeeType</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="firstName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{F8A09B71-672E-4603-9DAF-A317CAEAC860}">
     <direct-mapping>
      <src-attribute>FirstName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="jobTitle" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{D0BE1EDA-1077-4B66-B859-3124F34210E8}">
     <direct-mapping>
      <src-attribute>JobTitle</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="lastName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{2D29DA2D-01A6-4ED1-B961-23DBC75CA806}">
     <direct-mapping>
      <src-attribute>LastName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="mailNickname" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{9B54E3BB-C82D-48E7-A7E1-FF63373DABD6}">
     <direct-mapping>
      <src-attribute>MailNickname</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="manager" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{8975EC86-B2F5-467A-8691-0C72F66F4EFD}">
     <direct-mapping>
      <src-attribute>Manager</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="middleName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{FE904DF3-BB88-4208-8B90-BAABC43C10A2}">
     <direct-mapping>
      <src-attribute>MiddleName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="mobilePhone" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{646637FF-88F4-44F0-9BEF-19353C6EB5C3}">
     <direct-mapping>
      <src-attribute>MobilePhone</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="officeFax" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{CAC6BD70-09FB-42A0-A076-0DD37E2B8006}">
     <direct-mapping>
      <src-attribute>OfficeFax</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="officeLocation" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{7EFA7A50-2A0C-4A13-8749-075CCCBF0631}">
     <direct-mapping>
      <src-attribute>OfficeLocation</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="officePhone" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{D85A2683-E5E4-4C96-9B5F-20EAD253A9C0}">
     <direct-mapping>
      <src-attribute>OfficePhone</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="photo" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{A1ECA723-23B8-40B5-BC71-A4F9C8A2105F}">
     <direct-mapping>
      <src-attribute>Photo</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="postalCode" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{A2761BC1-1E78-447F-9A6C-8F6E2D522FFA}">
     <direct-mapping>
      <src-attribute>PostalCode</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="objectSid" type="ranked">
    <import-flow src-ma="{44ADA013-1FDE-43D3-97DC-6AD0BB106409}" cd-object-type="user" id="{A7A5DE4D-6C01-4AEA-9CC3-B41CEF127BAB}">
     <sync-rule-mapping mapping-type="direct" sync-rule-id="{D6883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{E3078C7E-CA5D-4470-A4B4-4B8FABB21F2E}" initial-flow-only="false" is-existence-test="false">
      <src-attribute>objectSid</src-attribute>
     </sync-rule-mapping>
    </import-flow>
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{F196B3C4-3701-4297-912C-5155F2050CBE}">
     <direct-mapping>
      <src-attribute>ObjectSID</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="domain" type="ranked">
    <import-flow src-ma="{44ADA013-1FDE-43D3-97DC-6AD0BB106409}" cd-object-type="user" id="{76B2229F-23E3-448B-B149-255337A6B17F}">
     <sync-rule-mapping mapping-type="constant" sync-rule-id="{D6883918-BBCD-E511-80CE-000D3A101B6C}" sync-rule-mapping-id="{ACE1DCB4-7DDF-444A-8795-F1C733169BFC}" initial-flow-only="false" is-existence-test="false">
      <sync-rule-value>CONTOSO</sync-rule-value>
     </sync-rule-mapping>
    </import-flow>
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Person" id="{CD7DDFA5-1B5D-43FA-A4D9-AC36475DD16B}">
     <direct-mapping>
      <src-attribute>Domain</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
  </import-flow-set>
  <import-flow-set mv-object-type="group">
   <import-flows mv-attribute="csObjectID" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{4896BAE9-5974-4513-B957-282D2DF110AE}">
     <direct-mapping>
      <src-attribute intrinsic="true">dn</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="expectedRulesList" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{FD05BBC3-59D5-42B3-B4C3-232EF296D984}">
     <direct-mapping>
      <src-attribute>ExpectedRulesList</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="accountName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{A128E03D-6C2C-495E-8CFB-02620DCEB308}">
     <direct-mapping>
      <src-attribute>AccountName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="description" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{C2B216AE-576D-4B24-B617-400FB37ACE33}">
     <direct-mapping>
      <src-attribute>Description</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="displayName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{A032F21D-8D13-4920-9180-11800B6A34EB}">
     <direct-mapping>
      <src-attribute>DisplayName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="email" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{523F5BA5-45D9-469B-9D99-62CA76C03C0B}">
     <direct-mapping>
      <src-attribute>Email</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="mailNickname" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{4F40BEBF-B05A-4279-9E01-CD10FAFCBC97}">
     <direct-mapping>
      <src-attribute>MailNickname</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="member" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{C288B897-DF58-4325-B480-CFEE69378660}">
     <direct-mapping>
      <src-attribute>Member</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="objectSid" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{6BF383DA-5560-49BA-B00F-273474F978A5}">
     <direct-mapping>
      <src-attribute>ObjectSID</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="domain" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{D727DCF7-4A84-46B4-8797-C8C56F61116E}">
     <direct-mapping>
      <src-attribute>Domain</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="owner" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{219D1DCF-A55E-4DFB-8B11-6A73758398AB}">
     <direct-mapping>
      <src-attribute>Owner</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="scope" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{FE613771-589A-4DC3-B724-E0ABBBE79519}">
     <direct-mapping>
      <src-attribute>Scope</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="type" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{A8F34CC2-FF09-46F1-B125-8DFDB3C12D0B}">
     <direct-mapping>
      <src-attribute>Type</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="displayedOwner" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="Group" id="{F12EA409-AA37-4B0F-8D96-A3B3E311C855}">
     <direct-mapping>
      <src-attribute>DisplayedOwner</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
  </import-flow-set>
  <import-flow-set mv-object-type="detectedRuleEntry">
   <import-flows mv-attribute="csObjectID" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="DetectedRuleEntry" id="{510680EA-A2E1-4A42-8229-2B3CCAC2F9CC}">
     <direct-mapping>
      <src-attribute intrinsic="true">dn</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
  </import-flow-set>
  <import-flow-set mv-object-type="synchronizationRule">
   <import-flows mv-attribute="connectedObjectType" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{9AC1CCCA-8429-442E-99FE-97FE3D317DB6}">
     <direct-mapping>
      <src-attribute>ConnectedObjectType</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="connectedSystem" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{32EFD3B0-0F4A-49F4-8254-B2BCF0509637}">
     <direct-mapping>
      <src-attribute>ConnectedSystem</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="connectedSystemScope" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{49E235ED-9439-40D3-A874-932ADA48861C}">
     <direct-mapping>
      <src-attribute>ConnectedSystemScope</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="createConnectedSystemObject" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{E1B04810-50E8-407A-BB66-D035DB566B85}">
     <direct-mapping>
      <src-attribute>CreateConnectedSystemObject</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="createILMObject" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{694DABA1-6984-44CE-A349-C275A3D4F9A3}">
     <direct-mapping>
      <src-attribute>CreateILMObject</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="dependency" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{C638BC54-5579-4287-B542-6E2EB05464CA}">
     <direct-mapping>
      <src-attribute>Dependency</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="disconnectConnectedSystemObject" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{274096A2-6AF1-44F8-AAF2-D030420AD193}">
     <direct-mapping>
      <src-attribute>DisconnectConnectedSystemObject</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="displayName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{6114EC77-40F6-480D-BB51-38C770817FB6}">
     <direct-mapping>
      <src-attribute>DisplayName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="existenceTest" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{6DEE3A02-DC54-483C-AF6C-CB60C8C003F1}">
     <direct-mapping>
      <src-attribute>ExistenceTest</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="flowType" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{DCA05B6B-A6C3-4B99-BCDB-55A3A41BD6B7}">
     <direct-mapping>
      <src-attribute>FlowType</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="ilmObjectType" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{76FE909F-EEFE-4B65-B6D8-0195EA339650}">
     <direct-mapping>
      <src-attribute>ILMObjectType</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="initialFlow" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{5465D459-D99C-4689-B908-B111DEA0E144}">
     <direct-mapping>
      <src-attribute>InitialFlow</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="persistentFlow" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{106788CC-3D46-43CA-841F-305314604587}">
     <direct-mapping>
      <src-attribute>PersistentFlow</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="precedence" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{6AE6857E-CC14-461E-9D89-82F09B4D6A08}">
     <direct-mapping>
      <src-attribute>Precedence</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="relationshipCriteria" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{550BD62F-4115-4430-AFFB-0289E048B210}">
     <direct-mapping>
      <src-attribute>RelationshipCriteria</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="synchronizationRuleParameters" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{7DC62E33-015A-4A03-B58B-25CE04752A1D}">
     <direct-mapping>
      <src-attribute>SynchronizationRuleParameters</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="msidmOutboundIsFilterBased" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{C785B246-33DB-4CF6-99F7-B28DD8D17C45}">
     <direct-mapping>
      <src-attribute>msidmOutboundIsFilterBased</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="msidmOutboundScopingFilters" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="SynchronizationRule" id="{2F562287-572B-4D3E-8A2B-2301656E37DE}">
     <direct-mapping>
      <src-attribute>msidmOutboundScopingFilters</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
  </import-flow-set>
  <import-flow-set mv-object-type="expectedRuleEntry">
   <import-flows mv-attribute="createdTime" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="ExpectedRuleEntry" id="{F5761DCA-A648-457A-9502-4D40422B1AA7}">
     <direct-mapping>
      <src-attribute>CreatedTime</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="expectedRuleEntryAction" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="ExpectedRuleEntry" id="{044C9E02-AAF5-4AE2-A97B-10F3F1DA471C}">
     <direct-mapping>
      <src-attribute>ExpectedRuleEntryAction</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="synchronizationRuleData" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="ExpectedRuleEntry" id="{E4FFC22A-10B9-4110-8DD0-D75A789B1667}">
     <direct-mapping>
      <src-attribute>SynchronizationRuleData</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="synchronizationRuleID" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="ExpectedRuleEntry" id="{0AD2A998-B21F-43A0-AD4A-F96AA39869F4}">
     <direct-mapping>
      <src-attribute>SynchronizationRuleID</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
   <import-flows mv-attribute="displayName" type="ranked">
    <import-flow src-ma="{5A22292D-DB03-4A69-8ECD-FA3B50293721}" cd-object-type="ExpectedRuleEntry" id="{8416B3AE-8D9F-4FC4-938B-4598BC674C9E}">
     <direct-mapping>
      <src-attribute>DisplayName</src-attribute>
     </direct-mapping>
    </import-flow>
   </import-flows>
  </import-flow-set>
  <per-ma-options>
   <ma-options ma-id="{5A22292D-DB03-4A69-8ECD-FA3B50293721}">
    <enable-recall>true</enable-recall>
   </ma-options>
   <ma-options ma-id="{44ADA013-1FDE-43D3-97DC-6AD0BB106409}">
    <enable-recall>true</enable-recall>
   </ma-options>
   <ma-options ma-id="{D7A141C2-3C21-4CC1-8B41-14055EF3490B}">
    <enable-recall>true</enable-recall>
   </ma-options>
  </per-ma-options>
 </import-attribute-flow>
</mv-data>

</export-ma>
